
VGA_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000580  08000588  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000580  08000580  00001588  2**0
                  CONTENTS
  4 .ARM          00000000  08000580  08000580  00001588  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000580  08000588  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000580  08000580  00001580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000584  08000584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000588  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000588  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000817  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000028c  00000000  00000000  00001dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006e  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000004a7  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001280  00000000  00000000  0000261d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053242  00000000  00000000  0000389d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00056adf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  00056b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00056c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000568 	.word	0x08000568

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000568 	.word	0x08000568

080001d4 <HSYNC_Init>:
/**
 * @brief Initializes TIM2 to generate a 40 MHz signal
 * 		  for HSYNC line
 */
static void HSYNC_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    // Enable clock access
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001d8:	4b32      	ldr	r3, [pc, #200]	@ (80002a4 <HSYNC_Init+0xd0>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001dc:	4a31      	ldr	r2, [pc, #196]	@ (80002a4 <HSYNC_Init+0xd0>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001e4:	4b2f      	ldr	r3, [pc, #188]	@ (80002a4 <HSYNC_Init+0xd0>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a2e      	ldr	r2, [pc, #184]	@ (80002a4 <HSYNC_Init+0xd0>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
    // Configure PA0 as Alternate Function
    GPIOA->MODER &= ~GPIO_MODER_MODER0;
 80001f0:	4b2d      	ldr	r3, [pc, #180]	@ (80002a8 <HSYNC_Init+0xd4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a2c      	ldr	r2, [pc, #176]	@ (80002a8 <HSYNC_Init+0xd4>)
 80001f6:	f023 0303 	bic.w	r3, r3, #3
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER0_1;
 80001fc:	4b2a      	ldr	r3, [pc, #168]	@ (80002a8 <HSYNC_Init+0xd4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a29      	ldr	r2, [pc, #164]	@ (80002a8 <HSYNC_Init+0xd4>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL0;
 8000208:	4b27      	ldr	r3, [pc, #156]	@ (80002a8 <HSYNC_Init+0xd4>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a26      	ldr	r2, [pc, #152]	@ (80002a8 <HSYNC_Init+0xd4>)
 800020e:	f023 030f 	bic.w	r3, r3, #15
 8000212:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x01;
 8000214:	4b24      	ldr	r3, [pc, #144]	@ (80002a8 <HSYNC_Init+0xd4>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a23      	ldr	r2, [pc, #140]	@ (80002a8 <HSYNC_Init+0xd4>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6213      	str	r3, [r2, #32]
    // Set up TIM2 for PWM mode (PWM Mode 1)
    TIM2->PSC = 8 - 1;
 8000220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000224:	2207      	movs	r2, #7
 8000226:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 264 - 1;
 8000228:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800022c:	f240 1207 	movw	r2, #263	@ 0x107
 8000230:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = 232;
 8000232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000236:	22e8      	movs	r2, #232	@ 0xe8
 8000238:	635a      	str	r2, [r3, #52]	@ 0x34
    // Set OC1M to PWM Mode 1 (110)
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M;
 800023a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000248:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800024a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000254:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000258:	6193      	str	r3, [r2, #24]
    // Enable Output Pre-load
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;
 800025a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000264:	f043 0308 	orr.w	r3, r3, #8
 8000268:	6193      	str	r3, [r2, #24]
    // Enable the output compare for channel 1 (CC1E)
    TIM2->CCER |= TIM_CCER_CC1E;
 800026a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6213      	str	r3, [r2, #32]
    // Enable the timer counter
    TIM2->CR1 |= TIM_CR1_CEN;
 800027a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6013      	str	r3, [r2, #0]
    // Force an update event to load the registers
    TIM2->EGR |= TIM_EGR_UG;
 800028a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6153      	str	r3, [r2, #20]
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000

080002ac <VSYNC_Init>:
/**
 * @brief Initializes TIM3 to generate a 40 MHz signal
 * 		  for VSYNC line
 */
static void VSYNC_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
    // Enable clock access for TIM3 and GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // Enable TIM3 clock
 80002b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000360 <VSYNC_Init+0xb4>)
 80002b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000360 <VSYNC_Init+0xb4>)
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable GPIOA clock
 80002bc:	4b28      	ldr	r3, [pc, #160]	@ (8000360 <VSYNC_Init+0xb4>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c0:	4a27      	ldr	r2, [pc, #156]	@ (8000360 <VSYNC_Init+0xb4>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA6 as Alternate Function (AF2)
    GPIOA->MODER &= ~GPIO_MODER_MODER6; // Clear mode bits for PA6
 80002c8:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <VSYNC_Init+0xb8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a25      	ldr	r2, [pc, #148]	@ (8000364 <VSYNC_Init+0xb8>)
 80002ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80002d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER6_1; // Set PA6 to alternate function
 80002d4:	4b23      	ldr	r3, [pc, #140]	@ (8000364 <VSYNC_Init+0xb8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a22      	ldr	r2, [pc, #136]	@ (8000364 <VSYNC_Init+0xb8>)
 80002da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002de:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL6; // Clear alternate function bits for PA6
 80002e0:	4b20      	ldr	r3, [pc, #128]	@ (8000364 <VSYNC_Init+0xb8>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000364 <VSYNC_Init+0xb8>)
 80002e6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80002ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x02 << (6 * 4); // Set alternate function 2 (AF2 for TIM3)
 80002ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <VSYNC_Init+0xb8>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <VSYNC_Init+0xb8>)
 80002f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002f6:	6213      	str	r3, [r2, #32]

    // Set up TIM3 for PWM mode
    TIM3->PSC = 80 - 1;        // Prescaler = 7 (timer clock = 10 MHz)
 80002f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000368 <VSYNC_Init+0xbc>)
 80002fa:	224f      	movs	r2, #79	@ 0x4f
 80002fc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 16579 - 1;      // Auto-reload value = 263
 80002fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <VSYNC_Init+0xbc>)
 8000300:	f244 02c2 	movw	r2, #16578	@ 0x40c2
 8000304:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCR1 = 16474 - 1;     // Duty cycle value
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <VSYNC_Init+0xbc>)
 8000308:	f244 0259 	movw	r2, #16473	@ 0x4059
 800030c:	635a      	str	r2, [r3, #52]	@ 0x34

    // Set OC1M to PWM Mode 1 (110)
    TIM3->CCMR1 &= ~TIM_CCMR1_OC1M; // Clear the mode bits
 800030e:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <VSYNC_Init+0xbc>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a15      	ldr	r2, [pc, #84]	@ (8000368 <VSYNC_Init+0xbc>)
 8000314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000318:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // Set to PWM Mode 1
 800031a:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <VSYNC_Init+0xbc>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a12      	ldr	r2, [pc, #72]	@ (8000368 <VSYNC_Init+0xbc>)
 8000320:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000324:	6193      	str	r3, [r2, #24]

    // Enable Output Pre-load
    TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload for CCR1
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <VSYNC_Init+0xbc>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <VSYNC_Init+0xbc>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	6193      	str	r3, [r2, #24]

    // Enable the output compare for channel 1
    TIM3->CCER |= TIM_CCER_CC1E; // Enable output on channel 1
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <VSYNC_Init+0xbc>)
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	4a0c      	ldr	r2, [pc, #48]	@ (8000368 <VSYNC_Init+0xbc>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6213      	str	r3, [r2, #32]

    // Enable the timer counter
    TIM3->CR1 |= TIM_CR1_CEN; // Start the timer
 800033e:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <VSYNC_Init+0xbc>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a09      	ldr	r2, [pc, #36]	@ (8000368 <VSYNC_Init+0xbc>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6013      	str	r3, [r2, #0]

    // Force an update event to load the registers
    TIM3->EGR |= TIM_EGR_UG; // Force an update event
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <VSYNC_Init+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a06      	ldr	r2, [pc, #24]	@ (8000368 <VSYNC_Init+0xbc>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6153      	str	r3, [r2, #20]
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40023800 	.word	0x40023800
 8000364:	40020000 	.word	0x40020000
 8000368:	40000400 	.word	0x40000400

0800036c <PIXEL_Init>:
/**
 * @brief Initializes TIM4 to generate a 40 MHz signal
 * 		  for PIXEL line
 */
static void PIXEL_Init(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	// Enable clock access
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000370:	4b1d      	ldr	r3, [pc, #116]	@ (80003e8 <PIXEL_Init+0x7c>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000374:	4a1c      	ldr	r2, [pc, #112]	@ (80003e8 <PIXEL_Init+0x7c>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800037c:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <PIXEL_Init+0x7c>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a19      	ldr	r2, [pc, #100]	@ (80003e8 <PIXEL_Init+0x7c>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
    // Configure PB6 as Alternate Function (AF2)
    GPIOB->MODER &= ~(GPIO_MODER_MODE6);
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <PIXEL_Init+0x80>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a17      	ldr	r2, [pc, #92]	@ (80003ec <PIXEL_Init+0x80>)
 800038e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000392:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE6_1);
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <PIXEL_Init+0x80>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a14      	ldr	r2, [pc, #80]	@ (80003ec <PIXEL_Init+0x80>)
 800039a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800039e:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (2 << (6 * 4));
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <PIXEL_Init+0x80>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <PIXEL_Init+0x80>)
 80003a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003aa:	6213      	str	r3, [r2, #32]
    // Configure TIM4 to generate a 40 MHz clock
    TIM4->PSC = 0;
 80003ac:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <PIXEL_Init+0x84>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <PIXEL_Init+0x84>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Configure TIM4 in output compare toggle mode
    TIM4->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <PIXEL_Init+0x84>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <PIXEL_Init+0x84>)
 80003be:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003c2:	6193      	str	r3, [r2, #24]
    TIM4->CCER |= TIM_CCER_CC1E;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <PIXEL_Init+0x84>)
 80003c6:	6a1b      	ldr	r3, [r3, #32]
 80003c8:	4a09      	ldr	r2, [pc, #36]	@ (80003f0 <PIXEL_Init+0x84>)
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6213      	str	r3, [r2, #32]
    // Enable the Counter
    TIM4->CR1 |= TIM_CR1_CEN;
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <PIXEL_Init+0x84>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a06      	ldr	r2, [pc, #24]	@ (80003f0 <PIXEL_Init+0x84>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020400 	.word	0x40020400
 80003f0:	40000800 	.word	0x40000800

080003f4 <VGA_Init>:

/**
 * @brief Initializes HSYNC, VSYNC and PIXEL signals
 */
void VGA_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	HSYNC_Init();
 80003f8:	f7ff feec 	bl	80001d4 <HSYNC_Init>
	VSYNC_Init();
 80003fc:	f7ff ff56 	bl	80002ac <VSYNC_Init>
	PIXEL_Init();
 8000400:	f7ff ffb4 	bl	800036c <PIXEL_Init>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <main>:
#include <stm32f4xx.h>
#include <Tools/logger.h>
#include "VGA_Core.h"

int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	VGA_Init();
 800040c:	f7ff fff2 	bl	80003f4 <VGA_Init>

	while(1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <main+0x8>

08000414 <Clock_Config>:

LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 80000000;

static void Clock_Config(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	// Configures flash latency.
	MODIFY_REG(FLASH->ACR,
 8000418:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <Clock_Config+0x9c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 0307 	bic.w	r3, r3, #7
 8000420:	4a23      	ldr	r2, [pc, #140]	@ (80004b0 <Clock_Config+0x9c>)
 8000422:	f043 0302 	orr.w	r3, r3, #2
 8000426:	6013      	str	r3, [r2, #0]
		FLASH_ACR_LATENCY,
		_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos
	);

	// Enables HSE.
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000428:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <Clock_Config+0xa0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a21      	ldr	r2, [pc, #132]	@ (80004b4 <Clock_Config+0xa0>)
 800042e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000432:	6013      	str	r3, [r2, #0]

	// Waits until HSE is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 8000434:	bf00      	nop
 8000436:	4b1f      	ldr	r3, [pc, #124]	@ (80004b4 <Clock_Config+0xa0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <Clock_Config+0x22>

	// Configures PLL: source = HSE, PLLCLK = 72MHz.
	MODIFY_REG(RCC->PLLCFGR,
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <Clock_Config+0xa0>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <Clock_Config+0xa4>)
 8000448:	401a      	ands	r2, r3
 800044a:	491a      	ldr	r1, [pc, #104]	@ (80004b4 <Clock_Config+0xa0>)
 800044c:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <Clock_Config+0xa8>)
 800044e:	4313      	orrs	r3, r2
 8000450:	604b      	str	r3, [r1, #4]
		RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
		_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 80) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE
	);

	// Enables PLL module.
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000452:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <Clock_Config+0xa0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a17      	ldr	r2, [pc, #92]	@ (80004b4 <Clock_Config+0xa0>)
 8000458:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800045c:	6013      	str	r3, [r2, #0]

	// Waits until PLL is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 800045e:	bf00      	nop
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <Clock_Config+0xa0>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f9      	beq.n	8000460 <Clock_Config+0x4c>

	// Switches system clock to PLL.
	MODIFY_REG(RCC->CFGR,
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <Clock_Config+0xa0>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	f023 0303 	bic.w	r3, r3, #3
 8000474:	4a0f      	ldr	r2, [pc, #60]	@ (80004b4 <Clock_Config+0xa0>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	6093      	str	r3, [r2, #8]
		RCC_CFGR_SW,
		_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
	);

	// Configures PPRE1 = 2, (PPRE2 = 1, HPRE = 1 by default).
	MODIFY_REG(RCC->CFGR,
 800047c:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <Clock_Config+0xa0>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000484:	4a0b      	ldr	r2, [pc, #44]	@ (80004b4 <Clock_Config+0xa0>)
 8000486:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800048a:	6093      	str	r3, [r2, #8]
		RCC_CFGR_PPRE1,
		_VAL2FLD(RCC_CFGR_PPRE1, 4)
	);

	// Waits until PLL is used.
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800048c:	bf00      	nop
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <Clock_Config+0xa0>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f003 030c 	and.w	r3, r3, #12
 8000496:	2b08      	cmp	r3, #8
 8000498:	d1f9      	bne.n	800048e <Clock_Config+0x7a>

	// Disables HSI.
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <Clock_Config+0xa0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a05      	ldr	r2, [pc, #20]	@ (80004b4 <Clock_Config+0xa0>)
 80004a0:	f023 0301 	bic.w	r3, r3, #1
 80004a4:	6013      	str	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40023c00 	.word	0x40023c00
 80004b4:	40023800 	.word	0x40023800
 80004b8:	f0bc8000 	.word	0xf0bc8000
 80004bc:	03401404 	.word	0x03401404

080004c0 <SystemInit>:

void SystemInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	Clock_Config();
 80004c4:	f7ff ffa6 	bl	8000414 <Clock_Config>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004cc:	480d      	ldr	r0, [pc, #52]	@ (8000504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d0:	f7ff fff6 	bl	80004c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480c      	ldr	r0, [pc, #48]	@ (8000508 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d6:	490d      	ldr	r1, [pc, #52]	@ (800050c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000510 <LoopForever+0xe>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000518 <LoopForever+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fa:	f000 f811 	bl	8000520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff ff83 	bl	8000408 <main>

08000502 <LoopForever>:

LoopForever:
  b LoopForever
 8000502:	e7fe      	b.n	8000502 <LoopForever>
  ldr   r0, =_estack
 8000504:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000510:	08000588 	.word	0x08000588
  ldr r2, =_sbss
 8000514:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000518:	2000001c 	.word	0x2000001c

0800051c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC_IRQHandler>
	...

08000520 <__libc_init_array>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	4d0d      	ldr	r5, [pc, #52]	@ (8000558 <__libc_init_array+0x38>)
 8000524:	4c0d      	ldr	r4, [pc, #52]	@ (800055c <__libc_init_array+0x3c>)
 8000526:	1b64      	subs	r4, r4, r5
 8000528:	10a4      	asrs	r4, r4, #2
 800052a:	2600      	movs	r6, #0
 800052c:	42a6      	cmp	r6, r4
 800052e:	d109      	bne.n	8000544 <__libc_init_array+0x24>
 8000530:	4d0b      	ldr	r5, [pc, #44]	@ (8000560 <__libc_init_array+0x40>)
 8000532:	4c0c      	ldr	r4, [pc, #48]	@ (8000564 <__libc_init_array+0x44>)
 8000534:	f000 f818 	bl	8000568 <_init>
 8000538:	1b64      	subs	r4, r4, r5
 800053a:	10a4      	asrs	r4, r4, #2
 800053c:	2600      	movs	r6, #0
 800053e:	42a6      	cmp	r6, r4
 8000540:	d105      	bne.n	800054e <__libc_init_array+0x2e>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	f855 3b04 	ldr.w	r3, [r5], #4
 8000548:	4798      	blx	r3
 800054a:	3601      	adds	r6, #1
 800054c:	e7ee      	b.n	800052c <__libc_init_array+0xc>
 800054e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000552:	4798      	blx	r3
 8000554:	3601      	adds	r6, #1
 8000556:	e7f2      	b.n	800053e <__libc_init_array+0x1e>
 8000558:	08000580 	.word	0x08000580
 800055c:	08000580 	.word	0x08000580
 8000560:	08000580 	.word	0x08000580
 8000564:	08000584 	.word	0x08000584

08000568 <_init>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr

08000574 <_fini>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr
