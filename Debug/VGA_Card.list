
VGA_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001664  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001804  08001804  00002804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001888  08001888  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001888  08001888  00002888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001890  08001890  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001890  08001890  00002890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001894  08001894  00002894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001898  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  080018f8  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080018f8  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000221c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000941  00000000  00000000  000052ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00005bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014f  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc59  00000000  00000000  00005f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002934  00000000  00000000  00015b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055bb4  00000000  00000000  000184b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006e068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e28  00000000  00000000  0006e0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0006eed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080017ec 	.word	0x080017ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080017ec 	.word	0x080017ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800028c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d013      	beq.n	80002c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800029c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a8:	e000      	b.n	80002ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80002aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e009      	b.n	80002f8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	60ba      	str	r2, [r7, #8]
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffc7 	bl	8000280 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbf1      	blt.n	80002e4 <_write+0x16>

  return len;
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d00a      	beq.n	8000332 <_get_log_level_string+0x26>
 800031c:	2b02      	cmp	r3, #2
 800031e:	dc0a      	bgt.n	8000336 <_get_log_level_string+0x2a>
 8000320:	2b00      	cmp	r3, #0
 8000322:	d002      	beq.n	800032a <_get_log_level_string+0x1e>
 8000324:	2b01      	cmp	r3, #1
 8000326:	d002      	beq.n	800032e <_get_log_level_string+0x22>
 8000328:	e005      	b.n	8000336 <_get_log_level_string+0x2a>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <_get_log_level_string+0x38>)
 800032c:	e003      	b.n	8000336 <_get_log_level_string+0x2a>
        case LOG_LEVEL_INFORMATION:
            return "INFO";
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <_get_log_level_string+0x3c>)
 8000330:	e001      	b.n	8000336 <_get_log_level_string+0x2a>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <_get_log_level_string+0x40>)
 8000334:	e7ff      	b.n	8000336 <_get_log_level_string+0x2a>
    }
}
 8000336:	4618      	mov	r0, r3
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	08001804 	.word	0x08001804
 8000348:	0800180c 	.word	0x0800180c
 800034c:	08001814 	.word	0x08001814

08000350 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level)
 800035e:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <_log+0x4c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	7bfa      	ldrb	r2, [r7, #15]
 8000364:	429a      	cmp	r2, r3
 8000366:	d814      	bhi.n	8000392 <_log+0x42>
        return;

	printf("[%s] ", _get_log_level_string(log_level));
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ffce 	bl	800030c <_get_log_level_string>
 8000370:	4603      	mov	r3, r0
 8000372:	4619      	mov	r1, r3
 8000374:	480a      	ldr	r0, [pc, #40]	@ (80003a0 <_log+0x50>)
 8000376:	f000 fe5f 	bl	8001038 <iprintf>
	vfprintf(stdout, format, args);
 800037a:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <_log+0x54>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	68b9      	ldr	r1, [r7, #8]
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fbfd 	bl	8000b84 <vfiprintf>
	printf("\n");
 800038a:	200a      	movs	r0, #10
 800038c:	f000 fe66 	bl	800105c <putchar>
 8000390:	e000      	b.n	8000394 <_log+0x44>
        return;
 8000392:	bf00      	nop
}
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000
 80003a0:	0800181c 	.word	0x0800181c
 80003a4:	20000010 	.word	0x20000010

080003a8 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003a8:	b40f      	push	{r0, r1, r2, r3}
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	6939      	ldr	r1, [r7, #16]
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ffc8 	bl	8000350 <_log>
    va_end(args);
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003ca:	b004      	add	sp, #16
 80003cc:	4770      	bx	lr
	...

080003d0 <__NVIC_EnableIRQ>:
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db0b      	blt.n	80003fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 021f 	and.w	r2, r3, #31
 80003e8:	4907      	ldr	r1, [pc, #28]	@ (8000408 <__NVIC_EnableIRQ+0x38>)
 80003ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ee:	095b      	lsrs	r3, r3, #5
 80003f0:	2001      	movs	r0, #1
 80003f2:	fa00 f202 	lsl.w	r2, r0, r2
 80003f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000e100 	.word	0xe000e100

0800040c <ITM_SendChar>:
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000414:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000418:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b00      	cmp	r3, #0
 8000422:	d013      	beq.n	800044c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000424:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000428:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800042c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000430:	2b00      	cmp	r3, #0
 8000432:	d00b      	beq.n	800044c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8000434:	e000      	b.n	8000438 <ITM_SendChar+0x2c>
      __NOP();
 8000436:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000438:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000442:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800044c:	687b      	ldr	r3, [r7, #4]
}
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <SWV_Send>:
#include "stm32f4xx.h"  // Include device header for STM32F4

// Function to send a character to ITM Stimulus Port 0 for SWV trace
static inline void SWV_Send(uint32_t value)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
    ITM_SendChar(value);  // Output value to SWV trace (1 = high, 0 = low)
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffd2 	bl	800040c <ITM_SendChar>
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <HSYNC_Init>:

static void HSYNC_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
    // Enable clock access
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000474:	4b36      	ldr	r3, [pc, #216]	@ (8000550 <HSYNC_Init+0xe0>)
 8000476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000478:	4a35      	ldr	r2, [pc, #212]	@ (8000550 <HSYNC_Init+0xe0>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000480:	4b33      	ldr	r3, [pc, #204]	@ (8000550 <HSYNC_Init+0xe0>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000484:	4a32      	ldr	r2, [pc, #200]	@ (8000550 <HSYNC_Init+0xe0>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6313      	str	r3, [r2, #48]	@ 0x30
    // Configure PA0 as Alternate Function
    GPIOA->MODER &= ~GPIO_MODER_MODER0;
 800048c:	4b31      	ldr	r3, [pc, #196]	@ (8000554 <HSYNC_Init+0xe4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a30      	ldr	r2, [pc, #192]	@ (8000554 <HSYNC_Init+0xe4>)
 8000492:	f023 0303 	bic.w	r3, r3, #3
 8000496:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER0_1;
 8000498:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <HSYNC_Init+0xe4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a2d      	ldr	r2, [pc, #180]	@ (8000554 <HSYNC_Init+0xe4>)
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL0;
 80004a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000554 <HSYNC_Init+0xe4>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000554 <HSYNC_Init+0xe4>)
 80004aa:	f023 030f 	bic.w	r3, r3, #15
 80004ae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x01;
 80004b0:	4b28      	ldr	r3, [pc, #160]	@ (8000554 <HSYNC_Init+0xe4>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a27      	ldr	r2, [pc, #156]	@ (8000554 <HSYNC_Init+0xe4>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6213      	str	r3, [r2, #32]
    // Set up TIM2 for PWM mode (PWM Mode 1)
    TIM2->PSC = 21 - 1;
 80004bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c0:	2214      	movs	r2, #20
 80004c2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 106 - 1;
 80004c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c8:	2269      	movs	r2, #105	@ 0x69
 80004ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = 93 - 1;
 80004cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d0:	225c      	movs	r2, #92	@ 0x5c
 80004d2:	635a      	str	r2, [r3, #52]	@ 0x34
    // Set OC1M to PWM Mode 1 (110)
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M;
 80004d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80004e2:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80004e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80004f2:	6193      	str	r3, [r2, #24]
    // Enable Output Pre-load
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
    // Enable Update Interrupt
    TIM2->DIER |= TIM_DIER_UIE;
 8000504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8000514:	201c      	movs	r0, #28
 8000516:	f7ff ff5b 	bl	80003d0 <__NVIC_EnableIRQ>
    // Enable the output compare for channel 1 (CC1E)
    TIM2->CCER |= TIM_CCER_CC1E;
 800051a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6213      	str	r3, [r2, #32]
    // Enable the timer counter
    TIM2->CR1 |= TIM_CR1_CEN;
 800052a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6013      	str	r3, [r2, #0]
    // Force an update event to load the registers
    TIM2->EGR |= TIM_EGR_UG;
 800053a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6153      	str	r3, [r2, #20]
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000

08000558 <VSYNC_Init>:

static void VSYNC_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	// Enable clock access
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800055c:	4b2e      	ldr	r3, [pc, #184]	@ (8000618 <VSYNC_Init+0xc0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a2d      	ldr	r2, [pc, #180]	@ (8000618 <VSYNC_Init+0xc0>)
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000568:	4b2b      	ldr	r3, [pc, #172]	@ (8000618 <VSYNC_Init+0xc0>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	4a2a      	ldr	r2, [pc, #168]	@ (8000618 <VSYNC_Init+0xc0>)
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	6313      	str	r3, [r2, #48]	@ 0x30
    // Configure PB4 as Alternate Function (AF2)
    GPIOB->MODER &= ~GPIO_MODER_MODER4;
 8000574:	4b29      	ldr	r3, [pc, #164]	@ (800061c <VSYNC_Init+0xc4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a28      	ldr	r2, [pc, #160]	@ (800061c <VSYNC_Init+0xc4>)
 800057a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800057e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= GPIO_MODER_MODER4_1;
 8000580:	4b26      	ldr	r3, [pc, #152]	@ (800061c <VSYNC_Init+0xc4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a25      	ldr	r2, [pc, #148]	@ (800061c <VSYNC_Init+0xc4>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058a:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] &= ~GPIO_AFRL_AFRL4;
 800058c:	4b23      	ldr	r3, [pc, #140]	@ (800061c <VSYNC_Init+0xc4>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a22      	ldr	r2, [pc, #136]	@ (800061c <VSYNC_Init+0xc4>)
 8000592:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000596:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= 0x02;
 8000598:	4b20      	ldr	r3, [pc, #128]	@ (800061c <VSYNC_Init+0xc4>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	4a1f      	ldr	r2, [pc, #124]	@ (800061c <VSYNC_Init+0xc4>)
 800059e:	f043 0302 	orr.w	r3, r3, #2
 80005a2:	6213      	str	r3, [r2, #32]
    // 4. Set up TIM3 for PWM mode (PWM Mode 1)
    TIM3->PSC = 84 - 1;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <VSYNC_Init+0xc8>)
 80005a6:	2253      	movs	r2, #83	@ 0x53
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 16579 - 1;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <VSYNC_Init+0xc8>)
 80005ac:	f244 02c2 	movw	r2, #16578	@ 0x40c2
 80005b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCR1 = 16474 - 1;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <VSYNC_Init+0xc8>)
 80005b4:	f244 0259 	movw	r2, #16473	@ 0x4059
 80005b8:	635a      	str	r2, [r3, #52]	@ 0x34
    // Set OC1M to PWM Mode 1 (110)
    TIM3->CCMR1 &= ~TIM_CCMR1_OC1M;
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <VSYNC_Init+0xc8>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <VSYNC_Init+0xc8>)
 80005c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80005c4:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80005c6:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <VSYNC_Init+0xc8>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a15      	ldr	r2, [pc, #84]	@ (8000620 <VSYNC_Init+0xc8>)
 80005cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80005d0:	6193      	str	r3, [r2, #24]
    // Enable Output Pre-load
    TIM3->CCMR1 |= TIM_CCMR1_OC1PE;
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <VSYNC_Init+0xc8>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <VSYNC_Init+0xc8>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	6193      	str	r3, [r2, #24]
    // Enable the output compare for channel 1 (CC1E)
    TIM3->CCER |= TIM_CCER_CC1E;
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <VSYNC_Init+0xc8>)
 80005e0:	6a1b      	ldr	r3, [r3, #32]
 80005e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <VSYNC_Init+0xc8>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6213      	str	r3, [r2, #32]
    // Enable Update Interrupt
    TIM3->DIER |= TIM_DIER_UIE;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <VSYNC_Init+0xc8>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <VSYNC_Init+0xc8>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM3_IRQn);
 80005f6:	201d      	movs	r0, #29
 80005f8:	f7ff feea 	bl	80003d0 <__NVIC_EnableIRQ>
    // Enable the timer counter
    TIM3->CR1 |= TIM_CR1_CEN;
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <VSYNC_Init+0xc8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <VSYNC_Init+0xc8>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]
    // Force an update event to load the registers
    TIM3->EGR |= TIM_EGR_UG;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <VSYNC_Init+0xc8>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <VSYNC_Init+0xc8>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6153      	str	r3, [r2, #20]
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40020400 	.word	0x40020400
 8000620:	40000400 	.word	0x40000400

08000624 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8000628:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01e      	beq.n	8000674 <TIM2_IRQHandler+0x50>
    {
    	// Clear the update interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;
 8000636:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800063a:	691b      	ldr	r3, [r3, #16]
 800063c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000640:	f023 0301 	bic.w	r3, r3, #1
 8000644:	6113      	str	r3, [r2, #16]

        if (TIM2->CCR1 == TIM2->CNT)
 8000646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800064a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000652:	429a      	cmp	r2, r3
 8000654:	d103      	bne.n	800065e <TIM2_IRQHandler+0x3a>
        {
            SWV_Send(1);  // Signal goes High
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff feff 	bl	800045a <SWV_Send>
        else if (TIM2->CNT == TIM2->ARR)
        {
            SWV_Send(0);  // Signal goes Low
        }
    }
}
 800065c:	e00a      	b.n	8000674 <TIM2_IRQHandler+0x50>
        else if (TIM2->CNT == TIM2->ARR)
 800065e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000664:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066a:	429a      	cmp	r2, r3
 800066c:	d102      	bne.n	8000674 <TIM2_IRQHandler+0x50>
            SWV_Send(0);  // Signal goes Low
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fef3 	bl	800045a <SWV_Send>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF)
 800067c:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d018      	beq.n	80006ba <TIM3_IRQHandler+0x42>
    {
    	// Clear the update interrupt flag
        TIM3->SR &= ~TIM_SR_UIF;
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6113      	str	r3, [r2, #16]

        if (TIM3->CCR1 == TIM3->CNT)
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 8000696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 800069a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069c:	429a      	cmp	r2, r3
 800069e:	d103      	bne.n	80006a8 <TIM3_IRQHandler+0x30>
        {
            SWV_Send(1);  // Signal goes High
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff feda 	bl	800045a <SWV_Send>
        else if (TIM3->CNT == TIM3->ARR)
        {
            SWV_Send(0);  // Signal goes Low
        }
    }
}
 80006a6:	e008      	b.n	80006ba <TIM3_IRQHandler+0x42>
        else if (TIM3->CNT == TIM3->ARR)
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 80006aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <TIM3_IRQHandler+0x48>)
 80006ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d102      	bne.n	80006ba <TIM3_IRQHandler+0x42>
            SWV_Send(0);  // Signal goes Low
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fed0 	bl	800045a <SWV_Send>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40000400 	.word	0x40000400

080006c4 <VGA_Init>:

void VGA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HSYNC_Init();
 80006c8:	f7ff fed2 	bl	8000470 <HSYNC_Init>
	VSYNC_Init();
 80006cc:	f7ff ff44 	bl	8000558 <VSYNC_Init>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <main>:
#include <stm32f4xx.h>
#include <Tools/logger.h>
#include "VGA_Core.h"

int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	VGA_Init();
 80006d8:	f7ff fff4 	bl	80006c4 <VGA_Init>

	while(1)
	{
		log_info("Hello World\n\r");
 80006dc:	4801      	ldr	r0, [pc, #4]	@ (80006e4 <main+0x10>)
 80006de:	f7ff fe63 	bl	80003a8 <log_info>
 80006e2:	e7fb      	b.n	80006dc <main+0x8>
 80006e4:	08001844 	.word	0x08001844

080006e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	e00a      	b.n	8000710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fa:	f3af 8000 	nop.w
 80006fe:	4601      	mov	r1, r0
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60ba      	str	r2, [r7, #8]
 8000706:	b2ca      	uxtb	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf0      	blt.n	80006fa <_read+0x12>
  }

  return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800074a:	605a      	str	r2, [r3, #4]
  return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_isatty>:

int _isatty(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000794:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <_sbrk+0x5c>)
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <_sbrk+0x60>)
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <_sbrk+0x64>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <_sbrk+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d207      	bcs.n	80007cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007bc:	f000 fd7c 	bl	80012b8 <__errno>
 80007c0:	4603      	mov	r3, r0
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	e009      	b.n	80007e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <_sbrk+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <_sbrk+0x64>)
 80007dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20018000 	.word	0x20018000
 80007ec:	00000400 	.word	0x00000400
 80007f0:	2000007c 	.word	0x2000007c
 80007f4:	200001d0 	.word	0x200001d0

080007f8 <Clock_Config>:

LogLevel system_log_level = LOG_LEVEL_DEBUG;
uint32_t SystemCoreClock = 84000000;

static void Clock_Config(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	// Configures flash latency.
	MODIFY_REG(FLASH->ACR,
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <Clock_Config+0x9c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f023 0307 	bic.w	r3, r3, #7
 8000804:	4a23      	ldr	r2, [pc, #140]	@ (8000894 <Clock_Config+0x9c>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	6013      	str	r3, [r2, #0]
		FLASH_ACR_LATENCY,
		_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS) //FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos
	);

	// Enables HSE.
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <Clock_Config+0xa0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <Clock_Config+0xa0>)
 8000812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000816:	6013      	str	r3, [r2, #0]

	// Waits until HSE is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 8000818:	bf00      	nop
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <Clock_Config+0xa0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <Clock_Config+0x22>

	// Configures PLL: source = HSE, PLLCLK = 72MHz.
	MODIFY_REG(RCC->PLLCFGR,
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <Clock_Config+0xa0>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <Clock_Config+0xa4>)
 800082c:	401a      	ands	r2, r3
 800082e:	491a      	ldr	r1, [pc, #104]	@ (8000898 <Clock_Config+0xa0>)
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <Clock_Config+0xa8>)
 8000832:	4313      	orrs	r3, r2
 8000834:	604b      	str	r3, [r1, #4]
		RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
		_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 84) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE
	);

	// Enables PLL module.
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <Clock_Config+0xa0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <Clock_Config+0xa0>)
 800083c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000840:	6013      	str	r3, [r2, #0]

	// Waits until PLL is stable.
	while (!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 8000842:	bf00      	nop
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <Clock_Config+0xa0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f9      	beq.n	8000844 <Clock_Config+0x4c>

	// Switches system clock to PLL.
	MODIFY_REG(RCC->CFGR,
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <Clock_Config+0xa0>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f023 0303 	bic.w	r3, r3, #3
 8000858:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <Clock_Config+0xa0>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_SW,
		_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
	);

	// Configures PPRE1 = 2, (PPRE2 = 1, HPRE = 1 by default).
	MODIFY_REG(RCC->CFGR,
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <Clock_Config+0xa0>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000868:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <Clock_Config+0xa0>)
 800086a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800086e:	6093      	str	r3, [r2, #8]
		RCC_CFGR_PPRE1,
		_VAL2FLD(RCC_CFGR_PPRE1, 4)
	);

	// Waits until PLL is used.
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000870:	bf00      	nop
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <Clock_Config+0xa0>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 030c 	and.w	r3, r3, #12
 800087a:	2b08      	cmp	r3, #8
 800087c:	d1f9      	bne.n	8000872 <Clock_Config+0x7a>

	// Disables HSI.
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <Clock_Config+0xa0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <Clock_Config+0xa0>)
 8000884:	f023 0301 	bic.w	r3, r3, #1
 8000888:	6013      	str	r3, [r2, #0]

}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40023c00 	.word	0x40023c00
 8000898:	40023800 	.word	0x40023800
 800089c:	f0bc8000 	.word	0xf0bc8000
 80008a0:	03401504 	.word	0x03401504

080008a4 <SystemInit>:

void SystemInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	Clock_Config();
 80008a8:	f7ff ffa6 	bl	80007f8 <Clock_Config>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff fff6 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008de:	f000 fcf1 	bl	80012c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff fef7 	bl	80006d4 <main>

080008e6 <LoopForever>:

LoopForever:
  b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008f4:	08001898 	.word	0x08001898
  ldr r2, =_sbss
 80008f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008fc:	200001cc 	.word	0x200001cc

08000900 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>

08000902 <__sfputc_r>:
 8000902:	6893      	ldr	r3, [r2, #8]
 8000904:	3b01      	subs	r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	b410      	push	{r4}
 800090a:	6093      	str	r3, [r2, #8]
 800090c:	da08      	bge.n	8000920 <__sfputc_r+0x1e>
 800090e:	6994      	ldr	r4, [r2, #24]
 8000910:	42a3      	cmp	r3, r4
 8000912:	db01      	blt.n	8000918 <__sfputc_r+0x16>
 8000914:	290a      	cmp	r1, #10
 8000916:	d103      	bne.n	8000920 <__sfputc_r+0x1e>
 8000918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800091c:	f000 bbe9 	b.w	80010f2 <__swbuf_r>
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	1c58      	adds	r0, r3, #1
 8000924:	6010      	str	r0, [r2, #0]
 8000926:	7019      	strb	r1, [r3, #0]
 8000928:	4608      	mov	r0, r1
 800092a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800092e:	4770      	bx	lr

08000930 <__sfputs_r>:
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	4606      	mov	r6, r0
 8000934:	460f      	mov	r7, r1
 8000936:	4614      	mov	r4, r2
 8000938:	18d5      	adds	r5, r2, r3
 800093a:	42ac      	cmp	r4, r5
 800093c:	d101      	bne.n	8000942 <__sfputs_r+0x12>
 800093e:	2000      	movs	r0, #0
 8000940:	e007      	b.n	8000952 <__sfputs_r+0x22>
 8000942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000946:	463a      	mov	r2, r7
 8000948:	4630      	mov	r0, r6
 800094a:	f7ff ffda 	bl	8000902 <__sfputc_r>
 800094e:	1c43      	adds	r3, r0, #1
 8000950:	d1f3      	bne.n	800093a <__sfputs_r+0xa>
 8000952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000954 <_vfiprintf_r>:
 8000954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000958:	460d      	mov	r5, r1
 800095a:	b09d      	sub	sp, #116	@ 0x74
 800095c:	4614      	mov	r4, r2
 800095e:	4698      	mov	r8, r3
 8000960:	4606      	mov	r6, r0
 8000962:	b118      	cbz	r0, 800096c <_vfiprintf_r+0x18>
 8000964:	6a03      	ldr	r3, [r0, #32]
 8000966:	b90b      	cbnz	r3, 800096c <_vfiprintf_r+0x18>
 8000968:	f000 fb30 	bl	8000fcc <__sinit>
 800096c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800096e:	07d9      	lsls	r1, r3, #31
 8000970:	d405      	bmi.n	800097e <_vfiprintf_r+0x2a>
 8000972:	89ab      	ldrh	r3, [r5, #12]
 8000974:	059a      	lsls	r2, r3, #22
 8000976:	d402      	bmi.n	800097e <_vfiprintf_r+0x2a>
 8000978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800097a:	f000 fcc8 	bl	800130e <__retarget_lock_acquire_recursive>
 800097e:	89ab      	ldrh	r3, [r5, #12]
 8000980:	071b      	lsls	r3, r3, #28
 8000982:	d501      	bpl.n	8000988 <_vfiprintf_r+0x34>
 8000984:	692b      	ldr	r3, [r5, #16]
 8000986:	b99b      	cbnz	r3, 80009b0 <_vfiprintf_r+0x5c>
 8000988:	4629      	mov	r1, r5
 800098a:	4630      	mov	r0, r6
 800098c:	f000 fbf0 	bl	8001170 <__swsetup_r>
 8000990:	b170      	cbz	r0, 80009b0 <_vfiprintf_r+0x5c>
 8000992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000994:	07dc      	lsls	r4, r3, #31
 8000996:	d504      	bpl.n	80009a2 <_vfiprintf_r+0x4e>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	b01d      	add	sp, #116	@ 0x74
 800099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a2:	89ab      	ldrh	r3, [r5, #12]
 80009a4:	0598      	lsls	r0, r3, #22
 80009a6:	d4f7      	bmi.n	8000998 <_vfiprintf_r+0x44>
 80009a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009aa:	f000 fcb1 	bl	8001310 <__retarget_lock_release_recursive>
 80009ae:	e7f3      	b.n	8000998 <_vfiprintf_r+0x44>
 80009b0:	2300      	movs	r3, #0
 80009b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80009b4:	2320      	movs	r3, #32
 80009b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80009be:	2330      	movs	r3, #48	@ 0x30
 80009c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000b70 <_vfiprintf_r+0x21c>
 80009c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009c8:	f04f 0901 	mov.w	r9, #1
 80009cc:	4623      	mov	r3, r4
 80009ce:	469a      	mov	sl, r3
 80009d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009d4:	b10a      	cbz	r2, 80009da <_vfiprintf_r+0x86>
 80009d6:	2a25      	cmp	r2, #37	@ 0x25
 80009d8:	d1f9      	bne.n	80009ce <_vfiprintf_r+0x7a>
 80009da:	ebba 0b04 	subs.w	fp, sl, r4
 80009de:	d00b      	beq.n	80009f8 <_vfiprintf_r+0xa4>
 80009e0:	465b      	mov	r3, fp
 80009e2:	4622      	mov	r2, r4
 80009e4:	4629      	mov	r1, r5
 80009e6:	4630      	mov	r0, r6
 80009e8:	f7ff ffa2 	bl	8000930 <__sfputs_r>
 80009ec:	3001      	adds	r0, #1
 80009ee:	f000 80a7 	beq.w	8000b40 <_vfiprintf_r+0x1ec>
 80009f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009f4:	445a      	add	r2, fp
 80009f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80009f8:	f89a 3000 	ldrb.w	r3, [sl]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 809f 	beq.w	8000b40 <_vfiprintf_r+0x1ec>
 8000a02:	2300      	movs	r3, #0
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a0c:	f10a 0a01 	add.w	sl, sl, #1
 8000a10:	9304      	str	r3, [sp, #16]
 8000a12:	9307      	str	r3, [sp, #28]
 8000a14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a1a:	4654      	mov	r4, sl
 8000a1c:	2205      	movs	r2, #5
 8000a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a22:	4853      	ldr	r0, [pc, #332]	@ (8000b70 <_vfiprintf_r+0x21c>)
 8000a24:	f7ff fbdc 	bl	80001e0 <memchr>
 8000a28:	9a04      	ldr	r2, [sp, #16]
 8000a2a:	b9d8      	cbnz	r0, 8000a64 <_vfiprintf_r+0x110>
 8000a2c:	06d1      	lsls	r1, r2, #27
 8000a2e:	bf44      	itt	mi
 8000a30:	2320      	movmi	r3, #32
 8000a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a36:	0713      	lsls	r3, r2, #28
 8000a38:	bf44      	itt	mi
 8000a3a:	232b      	movmi	r3, #43	@ 0x2b
 8000a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a40:	f89a 3000 	ldrb.w	r3, [sl]
 8000a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a46:	d015      	beq.n	8000a74 <_vfiprintf_r+0x120>
 8000a48:	9a07      	ldr	r2, [sp, #28]
 8000a4a:	4654      	mov	r4, sl
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f04f 0c0a 	mov.w	ip, #10
 8000a52:	4621      	mov	r1, r4
 8000a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a58:	3b30      	subs	r3, #48	@ 0x30
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	d94b      	bls.n	8000af6 <_vfiprintf_r+0x1a2>
 8000a5e:	b1b0      	cbz	r0, 8000a8e <_vfiprintf_r+0x13a>
 8000a60:	9207      	str	r2, [sp, #28]
 8000a62:	e014      	b.n	8000a8e <_vfiprintf_r+0x13a>
 8000a64:	eba0 0308 	sub.w	r3, r0, r8
 8000a68:	fa09 f303 	lsl.w	r3, r9, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	9304      	str	r3, [sp, #16]
 8000a70:	46a2      	mov	sl, r4
 8000a72:	e7d2      	b.n	8000a1a <_vfiprintf_r+0xc6>
 8000a74:	9b03      	ldr	r3, [sp, #12]
 8000a76:	1d19      	adds	r1, r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	9103      	str	r1, [sp, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bfbb      	ittet	lt
 8000a80:	425b      	neglt	r3, r3
 8000a82:	f042 0202 	orrlt.w	r2, r2, #2
 8000a86:	9307      	strge	r3, [sp, #28]
 8000a88:	9307      	strlt	r3, [sp, #28]
 8000a8a:	bfb8      	it	lt
 8000a8c:	9204      	strlt	r2, [sp, #16]
 8000a8e:	7823      	ldrb	r3, [r4, #0]
 8000a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a92:	d10a      	bne.n	8000aaa <_vfiprintf_r+0x156>
 8000a94:	7863      	ldrb	r3, [r4, #1]
 8000a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a98:	d132      	bne.n	8000b00 <_vfiprintf_r+0x1ac>
 8000a9a:	9b03      	ldr	r3, [sp, #12]
 8000a9c:	1d1a      	adds	r2, r3, #4
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	9203      	str	r2, [sp, #12]
 8000aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000aa6:	3402      	adds	r4, #2
 8000aa8:	9305      	str	r3, [sp, #20]
 8000aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000b80 <_vfiprintf_r+0x22c>
 8000aae:	7821      	ldrb	r1, [r4, #0]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4650      	mov	r0, sl
 8000ab4:	f7ff fb94 	bl	80001e0 <memchr>
 8000ab8:	b138      	cbz	r0, 8000aca <_vfiprintf_r+0x176>
 8000aba:	9b04      	ldr	r3, [sp, #16]
 8000abc:	eba0 000a 	sub.w	r0, r0, sl
 8000ac0:	2240      	movs	r2, #64	@ 0x40
 8000ac2:	4082      	lsls	r2, r0
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	3401      	adds	r4, #1
 8000ac8:	9304      	str	r3, [sp, #16]
 8000aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ace:	4829      	ldr	r0, [pc, #164]	@ (8000b74 <_vfiprintf_r+0x220>)
 8000ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ad4:	2206      	movs	r2, #6
 8000ad6:	f7ff fb83 	bl	80001e0 <memchr>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d03f      	beq.n	8000b5e <_vfiprintf_r+0x20a>
 8000ade:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <_vfiprintf_r+0x224>)
 8000ae0:	bb1b      	cbnz	r3, 8000b2a <_vfiprintf_r+0x1d6>
 8000ae2:	9b03      	ldr	r3, [sp, #12]
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	f023 0307 	bic.w	r3, r3, #7
 8000aea:	3308      	adds	r3, #8
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000af0:	443b      	add	r3, r7
 8000af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000af4:	e76a      	b.n	80009cc <_vfiprintf_r+0x78>
 8000af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000afa:	460c      	mov	r4, r1
 8000afc:	2001      	movs	r0, #1
 8000afe:	e7a8      	b.n	8000a52 <_vfiprintf_r+0xfe>
 8000b00:	2300      	movs	r3, #0
 8000b02:	3401      	adds	r4, #1
 8000b04:	9305      	str	r3, [sp, #20]
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 0c0a 	mov.w	ip, #10
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b12:	3a30      	subs	r2, #48	@ 0x30
 8000b14:	2a09      	cmp	r2, #9
 8000b16:	d903      	bls.n	8000b20 <_vfiprintf_r+0x1cc>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0c6      	beq.n	8000aaa <_vfiprintf_r+0x156>
 8000b1c:	9105      	str	r1, [sp, #20]
 8000b1e:	e7c4      	b.n	8000aaa <_vfiprintf_r+0x156>
 8000b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b24:	4604      	mov	r4, r0
 8000b26:	2301      	movs	r3, #1
 8000b28:	e7f0      	b.n	8000b0c <_vfiprintf_r+0x1b8>
 8000b2a:	ab03      	add	r3, sp, #12
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	462a      	mov	r2, r5
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <_vfiprintf_r+0x228>)
 8000b32:	a904      	add	r1, sp, #16
 8000b34:	4630      	mov	r0, r6
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4607      	mov	r7, r0
 8000b3c:	1c78      	adds	r0, r7, #1
 8000b3e:	d1d6      	bne.n	8000aee <_vfiprintf_r+0x19a>
 8000b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b42:	07d9      	lsls	r1, r3, #31
 8000b44:	d405      	bmi.n	8000b52 <_vfiprintf_r+0x1fe>
 8000b46:	89ab      	ldrh	r3, [r5, #12]
 8000b48:	059a      	lsls	r2, r3, #22
 8000b4a:	d402      	bmi.n	8000b52 <_vfiprintf_r+0x1fe>
 8000b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b4e:	f000 fbdf 	bl	8001310 <__retarget_lock_release_recursive>
 8000b52:	89ab      	ldrh	r3, [r5, #12]
 8000b54:	065b      	lsls	r3, r3, #25
 8000b56:	f53f af1f 	bmi.w	8000998 <_vfiprintf_r+0x44>
 8000b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b5c:	e71e      	b.n	800099c <_vfiprintf_r+0x48>
 8000b5e:	ab03      	add	r3, sp, #12
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	462a      	mov	r2, r5
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <_vfiprintf_r+0x228>)
 8000b66:	a904      	add	r1, sp, #16
 8000b68:	4630      	mov	r0, r6
 8000b6a:	f000 f883 	bl	8000c74 <_printf_i>
 8000b6e:	e7e4      	b.n	8000b3a <_vfiprintf_r+0x1e6>
 8000b70:	08001852 	.word	0x08001852
 8000b74:	0800185c 	.word	0x0800185c
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	08000931 	.word	0x08000931
 8000b80:	08001858 	.word	0x08001858

08000b84 <vfiprintf>:
 8000b84:	4613      	mov	r3, r2
 8000b86:	460a      	mov	r2, r1
 8000b88:	4601      	mov	r1, r0
 8000b8a:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <vfiprintf+0x10>)
 8000b8c:	6800      	ldr	r0, [r0, #0]
 8000b8e:	f7ff bee1 	b.w	8000954 <_vfiprintf_r>
 8000b92:	bf00      	nop
 8000b94:	20000010 	.word	0x20000010

08000b98 <_printf_common>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	4616      	mov	r6, r2
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	688a      	ldr	r2, [r1, #8]
 8000ba2:	690b      	ldr	r3, [r1, #16]
 8000ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	bfb8      	it	lt
 8000bac:	4613      	movlt	r3, r2
 8000bae:	6033      	str	r3, [r6, #0]
 8000bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000bb4:	4607      	mov	r7, r0
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	b10a      	cbz	r2, 8000bbe <_printf_common+0x26>
 8000bba:	3301      	adds	r3, #1
 8000bbc:	6033      	str	r3, [r6, #0]
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	0699      	lsls	r1, r3, #26
 8000bc2:	bf42      	ittt	mi
 8000bc4:	6833      	ldrmi	r3, [r6, #0]
 8000bc6:	3302      	addmi	r3, #2
 8000bc8:	6033      	strmi	r3, [r6, #0]
 8000bca:	6825      	ldr	r5, [r4, #0]
 8000bcc:	f015 0506 	ands.w	r5, r5, #6
 8000bd0:	d106      	bne.n	8000be0 <_printf_common+0x48>
 8000bd2:	f104 0a19 	add.w	sl, r4, #25
 8000bd6:	68e3      	ldr	r3, [r4, #12]
 8000bd8:	6832      	ldr	r2, [r6, #0]
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	42ab      	cmp	r3, r5
 8000bde:	dc26      	bgt.n	8000c2e <_printf_common+0x96>
 8000be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000be4:	6822      	ldr	r2, [r4, #0]
 8000be6:	3b00      	subs	r3, #0
 8000be8:	bf18      	it	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	0692      	lsls	r2, r2, #26
 8000bee:	d42b      	bmi.n	8000c48 <_printf_common+0xb0>
 8000bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bf4:	4641      	mov	r1, r8
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	47c8      	blx	r9
 8000bfa:	3001      	adds	r0, #1
 8000bfc:	d01e      	beq.n	8000c3c <_printf_common+0xa4>
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	6922      	ldr	r2, [r4, #16]
 8000c02:	f003 0306 	and.w	r3, r3, #6
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf02      	ittt	eq
 8000c0a:	68e5      	ldreq	r5, [r4, #12]
 8000c0c:	6833      	ldreq	r3, [r6, #0]
 8000c0e:	1aed      	subeq	r5, r5, r3
 8000c10:	68a3      	ldr	r3, [r4, #8]
 8000c12:	bf0c      	ite	eq
 8000c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c18:	2500      	movne	r5, #0
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	bfc4      	itt	gt
 8000c1e:	1a9b      	subgt	r3, r3, r2
 8000c20:	18ed      	addgt	r5, r5, r3
 8000c22:	2600      	movs	r6, #0
 8000c24:	341a      	adds	r4, #26
 8000c26:	42b5      	cmp	r5, r6
 8000c28:	d11a      	bne.n	8000c60 <_printf_common+0xc8>
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	e008      	b.n	8000c40 <_printf_common+0xa8>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4652      	mov	r2, sl
 8000c32:	4641      	mov	r1, r8
 8000c34:	4638      	mov	r0, r7
 8000c36:	47c8      	blx	r9
 8000c38:	3001      	adds	r0, #1
 8000c3a:	d103      	bne.n	8000c44 <_printf_common+0xac>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	3501      	adds	r5, #1
 8000c46:	e7c6      	b.n	8000bd6 <_printf_common+0x3e>
 8000c48:	18e1      	adds	r1, r4, r3
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	2030      	movs	r0, #48	@ 0x30
 8000c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c52:	4422      	add	r2, r4
 8000c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e7c7      	b.n	8000bf0 <_printf_common+0x58>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4622      	mov	r2, r4
 8000c64:	4641      	mov	r1, r8
 8000c66:	4638      	mov	r0, r7
 8000c68:	47c8      	blx	r9
 8000c6a:	3001      	adds	r0, #1
 8000c6c:	d0e6      	beq.n	8000c3c <_printf_common+0xa4>
 8000c6e:	3601      	adds	r6, #1
 8000c70:	e7d9      	b.n	8000c26 <_printf_common+0x8e>
	...

08000c74 <_printf_i>:
 8000c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c78:	7e0f      	ldrb	r7, [r1, #24]
 8000c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c7c:	2f78      	cmp	r7, #120	@ 0x78
 8000c7e:	4691      	mov	r9, r2
 8000c80:	4680      	mov	r8, r0
 8000c82:	460c      	mov	r4, r1
 8000c84:	469a      	mov	sl, r3
 8000c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c8a:	d807      	bhi.n	8000c9c <_printf_i+0x28>
 8000c8c:	2f62      	cmp	r7, #98	@ 0x62
 8000c8e:	d80a      	bhi.n	8000ca6 <_printf_i+0x32>
 8000c90:	2f00      	cmp	r7, #0
 8000c92:	f000 80d2 	beq.w	8000e3a <_printf_i+0x1c6>
 8000c96:	2f58      	cmp	r7, #88	@ 0x58
 8000c98:	f000 80b9 	beq.w	8000e0e <_printf_i+0x19a>
 8000c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ca4:	e03a      	b.n	8000d1c <_printf_i+0xa8>
 8000ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000caa:	2b15      	cmp	r3, #21
 8000cac:	d8f6      	bhi.n	8000c9c <_printf_i+0x28>
 8000cae:	a101      	add	r1, pc, #4	@ (adr r1, 8000cb4 <_printf_i+0x40>)
 8000cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cb4:	08000d0d 	.word	0x08000d0d
 8000cb8:	08000d21 	.word	0x08000d21
 8000cbc:	08000c9d 	.word	0x08000c9d
 8000cc0:	08000c9d 	.word	0x08000c9d
 8000cc4:	08000c9d 	.word	0x08000c9d
 8000cc8:	08000c9d 	.word	0x08000c9d
 8000ccc:	08000d21 	.word	0x08000d21
 8000cd0:	08000c9d 	.word	0x08000c9d
 8000cd4:	08000c9d 	.word	0x08000c9d
 8000cd8:	08000c9d 	.word	0x08000c9d
 8000cdc:	08000c9d 	.word	0x08000c9d
 8000ce0:	08000e21 	.word	0x08000e21
 8000ce4:	08000d4b 	.word	0x08000d4b
 8000ce8:	08000ddb 	.word	0x08000ddb
 8000cec:	08000c9d 	.word	0x08000c9d
 8000cf0:	08000c9d 	.word	0x08000c9d
 8000cf4:	08000e43 	.word	0x08000e43
 8000cf8:	08000c9d 	.word	0x08000c9d
 8000cfc:	08000d4b 	.word	0x08000d4b
 8000d00:	08000c9d 	.word	0x08000c9d
 8000d04:	08000c9d 	.word	0x08000c9d
 8000d08:	08000de3 	.word	0x08000de3
 8000d0c:	6833      	ldr	r3, [r6, #0]
 8000d0e:	1d1a      	adds	r2, r3, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6032      	str	r2, [r6, #0]
 8000d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e09d      	b.n	8000e5c <_printf_i+0x1e8>
 8000d20:	6833      	ldr	r3, [r6, #0]
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	1d19      	adds	r1, r3, #4
 8000d26:	6031      	str	r1, [r6, #0]
 8000d28:	0606      	lsls	r6, r0, #24
 8000d2a:	d501      	bpl.n	8000d30 <_printf_i+0xbc>
 8000d2c:	681d      	ldr	r5, [r3, #0]
 8000d2e:	e003      	b.n	8000d38 <_printf_i+0xc4>
 8000d30:	0645      	lsls	r5, r0, #25
 8000d32:	d5fb      	bpl.n	8000d2c <_printf_i+0xb8>
 8000d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	da03      	bge.n	8000d44 <_printf_i+0xd0>
 8000d3c:	232d      	movs	r3, #45	@ 0x2d
 8000d3e:	426d      	negs	r5, r5
 8000d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d44:	4859      	ldr	r0, [pc, #356]	@ (8000eac <_printf_i+0x238>)
 8000d46:	230a      	movs	r3, #10
 8000d48:	e011      	b.n	8000d6e <_printf_i+0xfa>
 8000d4a:	6821      	ldr	r1, [r4, #0]
 8000d4c:	6833      	ldr	r3, [r6, #0]
 8000d4e:	0608      	lsls	r0, r1, #24
 8000d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d54:	d402      	bmi.n	8000d5c <_printf_i+0xe8>
 8000d56:	0649      	lsls	r1, r1, #25
 8000d58:	bf48      	it	mi
 8000d5a:	b2ad      	uxthmi	r5, r5
 8000d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d5e:	4853      	ldr	r0, [pc, #332]	@ (8000eac <_printf_i+0x238>)
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	bf14      	ite	ne
 8000d64:	230a      	movne	r3, #10
 8000d66:	2308      	moveq	r3, #8
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d6e:	6866      	ldr	r6, [r4, #4]
 8000d70:	60a6      	str	r6, [r4, #8]
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	bfa2      	ittt	ge
 8000d76:	6821      	ldrge	r1, [r4, #0]
 8000d78:	f021 0104 	bicge.w	r1, r1, #4
 8000d7c:	6021      	strge	r1, [r4, #0]
 8000d7e:	b90d      	cbnz	r5, 8000d84 <_printf_i+0x110>
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d04b      	beq.n	8000e1c <_printf_i+0x1a8>
 8000d84:	4616      	mov	r6, r2
 8000d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8000d8e:	5dc7      	ldrb	r7, [r0, r7]
 8000d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d94:	462f      	mov	r7, r5
 8000d96:	42bb      	cmp	r3, r7
 8000d98:	460d      	mov	r5, r1
 8000d9a:	d9f4      	bls.n	8000d86 <_printf_i+0x112>
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d10b      	bne.n	8000db8 <_printf_i+0x144>
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	07df      	lsls	r7, r3, #31
 8000da4:	d508      	bpl.n	8000db8 <_printf_i+0x144>
 8000da6:	6923      	ldr	r3, [r4, #16]
 8000da8:	6861      	ldr	r1, [r4, #4]
 8000daa:	4299      	cmp	r1, r3
 8000dac:	bfde      	ittt	le
 8000dae:	2330      	movle	r3, #48	@ 0x30
 8000db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000db4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000db8:	1b92      	subs	r2, r2, r6
 8000dba:	6122      	str	r2, [r4, #16]
 8000dbc:	f8cd a000 	str.w	sl, [sp]
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	aa03      	add	r2, sp, #12
 8000dc4:	4621      	mov	r1, r4
 8000dc6:	4640      	mov	r0, r8
 8000dc8:	f7ff fee6 	bl	8000b98 <_printf_common>
 8000dcc:	3001      	adds	r0, #1
 8000dce:	d14a      	bne.n	8000e66 <_printf_i+0x1f2>
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	b004      	add	sp, #16
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	4833      	ldr	r0, [pc, #204]	@ (8000eb0 <_printf_i+0x23c>)
 8000de4:	2778      	movs	r7, #120	@ 0x78
 8000de6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	6831      	ldr	r1, [r6, #0]
 8000dee:	061f      	lsls	r7, r3, #24
 8000df0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000df4:	d402      	bmi.n	8000dfc <_printf_i+0x188>
 8000df6:	065f      	lsls	r7, r3, #25
 8000df8:	bf48      	it	mi
 8000dfa:	b2ad      	uxthmi	r5, r5
 8000dfc:	6031      	str	r1, [r6, #0]
 8000dfe:	07d9      	lsls	r1, r3, #31
 8000e00:	bf44      	itt	mi
 8000e02:	f043 0320 	orrmi.w	r3, r3, #32
 8000e06:	6023      	strmi	r3, [r4, #0]
 8000e08:	b11d      	cbz	r5, 8000e12 <_printf_i+0x19e>
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	e7ac      	b.n	8000d68 <_printf_i+0xf4>
 8000e0e:	4827      	ldr	r0, [pc, #156]	@ (8000eac <_printf_i+0x238>)
 8000e10:	e7e9      	b.n	8000de6 <_printf_i+0x172>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	f023 0320 	bic.w	r3, r3, #32
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	e7f6      	b.n	8000e0a <_printf_i+0x196>
 8000e1c:	4616      	mov	r6, r2
 8000e1e:	e7bd      	b.n	8000d9c <_printf_i+0x128>
 8000e20:	6833      	ldr	r3, [r6, #0]
 8000e22:	6825      	ldr	r5, [r4, #0]
 8000e24:	6961      	ldr	r1, [r4, #20]
 8000e26:	1d18      	adds	r0, r3, #4
 8000e28:	6030      	str	r0, [r6, #0]
 8000e2a:	062e      	lsls	r6, r5, #24
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	d501      	bpl.n	8000e34 <_printf_i+0x1c0>
 8000e30:	6019      	str	r1, [r3, #0]
 8000e32:	e002      	b.n	8000e3a <_printf_i+0x1c6>
 8000e34:	0668      	lsls	r0, r5, #25
 8000e36:	d5fb      	bpl.n	8000e30 <_printf_i+0x1bc>
 8000e38:	8019      	strh	r1, [r3, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6123      	str	r3, [r4, #16]
 8000e3e:	4616      	mov	r6, r2
 8000e40:	e7bc      	b.n	8000dbc <_printf_i+0x148>
 8000e42:	6833      	ldr	r3, [r6, #0]
 8000e44:	1d1a      	adds	r2, r3, #4
 8000e46:	6032      	str	r2, [r6, #0]
 8000e48:	681e      	ldr	r6, [r3, #0]
 8000e4a:	6862      	ldr	r2, [r4, #4]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4630      	mov	r0, r6
 8000e50:	f7ff f9c6 	bl	80001e0 <memchr>
 8000e54:	b108      	cbz	r0, 8000e5a <_printf_i+0x1e6>
 8000e56:	1b80      	subs	r0, r0, r6
 8000e58:	6060      	str	r0, [r4, #4]
 8000e5a:	6863      	ldr	r3, [r4, #4]
 8000e5c:	6123      	str	r3, [r4, #16]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e64:	e7aa      	b.n	8000dbc <_printf_i+0x148>
 8000e66:	6923      	ldr	r3, [r4, #16]
 8000e68:	4632      	mov	r2, r6
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	47d0      	blx	sl
 8000e70:	3001      	adds	r0, #1
 8000e72:	d0ad      	beq.n	8000dd0 <_printf_i+0x15c>
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	079b      	lsls	r3, r3, #30
 8000e78:	d413      	bmi.n	8000ea2 <_printf_i+0x22e>
 8000e7a:	68e0      	ldr	r0, [r4, #12]
 8000e7c:	9b03      	ldr	r3, [sp, #12]
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	bfb8      	it	lt
 8000e82:	4618      	movlt	r0, r3
 8000e84:	e7a6      	b.n	8000dd4 <_printf_i+0x160>
 8000e86:	2301      	movs	r3, #1
 8000e88:	4632      	mov	r2, r6
 8000e8a:	4649      	mov	r1, r9
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	47d0      	blx	sl
 8000e90:	3001      	adds	r0, #1
 8000e92:	d09d      	beq.n	8000dd0 <_printf_i+0x15c>
 8000e94:	3501      	adds	r5, #1
 8000e96:	68e3      	ldr	r3, [r4, #12]
 8000e98:	9903      	ldr	r1, [sp, #12]
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	42ab      	cmp	r3, r5
 8000e9e:	dcf2      	bgt.n	8000e86 <_printf_i+0x212>
 8000ea0:	e7eb      	b.n	8000e7a <_printf_i+0x206>
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	f104 0619 	add.w	r6, r4, #25
 8000ea8:	e7f5      	b.n	8000e96 <_printf_i+0x222>
 8000eaa:	bf00      	nop
 8000eac:	08001863 	.word	0x08001863
 8000eb0:	08001874 	.word	0x08001874

08000eb4 <std>:
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	b510      	push	{r4, lr}
 8000eb8:	4604      	mov	r4, r0
 8000eba:	e9c0 3300 	strd	r3, r3, [r0]
 8000ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ec2:	6083      	str	r3, [r0, #8]
 8000ec4:	8181      	strh	r1, [r0, #12]
 8000ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ec8:	81c2      	strh	r2, [r0, #14]
 8000eca:	6183      	str	r3, [r0, #24]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2208      	movs	r2, #8
 8000ed0:	305c      	adds	r0, #92	@ 0x5c
 8000ed2:	f000 f9a3 	bl	800121c <memset>
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <std+0x58>)
 8000ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <std+0x5c>)
 8000edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <std+0x60>)
 8000ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <std+0x64>)
 8000ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <std+0x68>)
 8000ee8:	6224      	str	r4, [r4, #32]
 8000eea:	429c      	cmp	r4, r3
 8000eec:	d006      	beq.n	8000efc <std+0x48>
 8000eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ef2:	4294      	cmp	r4, r2
 8000ef4:	d002      	beq.n	8000efc <std+0x48>
 8000ef6:	33d0      	adds	r3, #208	@ 0xd0
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	d105      	bne.n	8000f08 <std+0x54>
 8000efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f04:	f000 ba02 	b.w	800130c <__retarget_lock_init_recursive>
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	bf00      	nop
 8000f0c:	0800106d 	.word	0x0800106d
 8000f10:	0800108f 	.word	0x0800108f
 8000f14:	080010c7 	.word	0x080010c7
 8000f18:	080010eb 	.word	0x080010eb
 8000f1c:	20000080 	.word	0x20000080

08000f20 <stdio_exit_handler>:
 8000f20:	4a02      	ldr	r2, [pc, #8]	@ (8000f2c <stdio_exit_handler+0xc>)
 8000f22:	4903      	ldr	r1, [pc, #12]	@ (8000f30 <stdio_exit_handler+0x10>)
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <stdio_exit_handler+0x14>)
 8000f26:	f000 b869 	b.w	8000ffc <_fwalk_sglue>
 8000f2a:	bf00      	nop
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	0800160d 	.word	0x0800160d
 8000f34:	20000014 	.word	0x20000014

08000f38 <cleanup_stdio>:
 8000f38:	6841      	ldr	r1, [r0, #4]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <cleanup_stdio+0x34>)
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	4604      	mov	r4, r0
 8000f42:	d001      	beq.n	8000f48 <cleanup_stdio+0x10>
 8000f44:	f000 fb62 	bl	800160c <_fflush_r>
 8000f48:	68a1      	ldr	r1, [r4, #8]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <cleanup_stdio+0x38>)
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d002      	beq.n	8000f56 <cleanup_stdio+0x1e>
 8000f50:	4620      	mov	r0, r4
 8000f52:	f000 fb5b 	bl	800160c <_fflush_r>
 8000f56:	68e1      	ldr	r1, [r4, #12]
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <cleanup_stdio+0x3c>)
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d004      	beq.n	8000f68 <cleanup_stdio+0x30>
 8000f5e:	4620      	mov	r0, r4
 8000f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f64:	f000 bb52 	b.w	800160c <_fflush_r>
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000080 	.word	0x20000080
 8000f70:	200000e8 	.word	0x200000e8
 8000f74:	20000150 	.word	0x20000150

08000f78 <global_stdio_init.part.0>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <global_stdio_init.part.0+0x30>)
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8000fac <global_stdio_init.part.0+0x34>)
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <global_stdio_init.part.0+0x38>)
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	4620      	mov	r0, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	2104      	movs	r1, #4
 8000f88:	f7ff ff94 	bl	8000eb4 <std>
 8000f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f90:	2201      	movs	r2, #1
 8000f92:	2109      	movs	r1, #9
 8000f94:	f7ff ff8e 	bl	8000eb4 <std>
 8000f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa2:	2112      	movs	r1, #18
 8000fa4:	f7ff bf86 	b.w	8000eb4 <std>
 8000fa8:	200001b8 	.word	0x200001b8
 8000fac:	20000080 	.word	0x20000080
 8000fb0:	08000f21 	.word	0x08000f21

08000fb4 <__sfp_lock_acquire>:
 8000fb4:	4801      	ldr	r0, [pc, #4]	@ (8000fbc <__sfp_lock_acquire+0x8>)
 8000fb6:	f000 b9aa 	b.w	800130e <__retarget_lock_acquire_recursive>
 8000fba:	bf00      	nop
 8000fbc:	200001c1 	.word	0x200001c1

08000fc0 <__sfp_lock_release>:
 8000fc0:	4801      	ldr	r0, [pc, #4]	@ (8000fc8 <__sfp_lock_release+0x8>)
 8000fc2:	f000 b9a5 	b.w	8001310 <__retarget_lock_release_recursive>
 8000fc6:	bf00      	nop
 8000fc8:	200001c1 	.word	0x200001c1

08000fcc <__sinit>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	4604      	mov	r4, r0
 8000fd0:	f7ff fff0 	bl	8000fb4 <__sfp_lock_acquire>
 8000fd4:	6a23      	ldr	r3, [r4, #32]
 8000fd6:	b11b      	cbz	r3, 8000fe0 <__sinit+0x14>
 8000fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fdc:	f7ff bff0 	b.w	8000fc0 <__sfp_lock_release>
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__sinit+0x28>)
 8000fe2:	6223      	str	r3, [r4, #32]
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__sinit+0x2c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f5      	bne.n	8000fd8 <__sinit+0xc>
 8000fec:	f7ff ffc4 	bl	8000f78 <global_stdio_init.part.0>
 8000ff0:	e7f2      	b.n	8000fd8 <__sinit+0xc>
 8000ff2:	bf00      	nop
 8000ff4:	08000f39 	.word	0x08000f39
 8000ff8:	200001b8 	.word	0x200001b8

08000ffc <_fwalk_sglue>:
 8000ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001000:	4607      	mov	r7, r0
 8001002:	4688      	mov	r8, r1
 8001004:	4614      	mov	r4, r2
 8001006:	2600      	movs	r6, #0
 8001008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800100c:	f1b9 0901 	subs.w	r9, r9, #1
 8001010:	d505      	bpl.n	800101e <_fwalk_sglue+0x22>
 8001012:	6824      	ldr	r4, [r4, #0]
 8001014:	2c00      	cmp	r4, #0
 8001016:	d1f7      	bne.n	8001008 <_fwalk_sglue+0xc>
 8001018:	4630      	mov	r0, r6
 800101a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800101e:	89ab      	ldrh	r3, [r5, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d907      	bls.n	8001034 <_fwalk_sglue+0x38>
 8001024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001028:	3301      	adds	r3, #1
 800102a:	d003      	beq.n	8001034 <_fwalk_sglue+0x38>
 800102c:	4629      	mov	r1, r5
 800102e:	4638      	mov	r0, r7
 8001030:	47c0      	blx	r8
 8001032:	4306      	orrs	r6, r0
 8001034:	3568      	adds	r5, #104	@ 0x68
 8001036:	e7e9      	b.n	800100c <_fwalk_sglue+0x10>

08001038 <iprintf>:
 8001038:	b40f      	push	{r0, r1, r2, r3}
 800103a:	b507      	push	{r0, r1, r2, lr}
 800103c:	4906      	ldr	r1, [pc, #24]	@ (8001058 <iprintf+0x20>)
 800103e:	ab04      	add	r3, sp, #16
 8001040:	6808      	ldr	r0, [r1, #0]
 8001042:	f853 2b04 	ldr.w	r2, [r3], #4
 8001046:	6881      	ldr	r1, [r0, #8]
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f7ff fc83 	bl	8000954 <_vfiprintf_r>
 800104e:	b003      	add	sp, #12
 8001050:	f85d eb04 	ldr.w	lr, [sp], #4
 8001054:	b004      	add	sp, #16
 8001056:	4770      	bx	lr
 8001058:	20000010 	.word	0x20000010

0800105c <putchar>:
 800105c:	4b02      	ldr	r3, [pc, #8]	@ (8001068 <putchar+0xc>)
 800105e:	4601      	mov	r1, r0
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	6882      	ldr	r2, [r0, #8]
 8001064:	f000 bb5c 	b.w	8001720 <_putc_r>
 8001068:	20000010 	.word	0x20000010

0800106c <__sread>:
 800106c:	b510      	push	{r4, lr}
 800106e:	460c      	mov	r4, r1
 8001070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001074:	f000 f8fc 	bl	8001270 <_read_r>
 8001078:	2800      	cmp	r0, #0
 800107a:	bfab      	itete	ge
 800107c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800107e:	89a3      	ldrhlt	r3, [r4, #12]
 8001080:	181b      	addge	r3, r3, r0
 8001082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001086:	bfac      	ite	ge
 8001088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800108a:	81a3      	strhlt	r3, [r4, #12]
 800108c:	bd10      	pop	{r4, pc}

0800108e <__swrite>:
 800108e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001092:	461f      	mov	r7, r3
 8001094:	898b      	ldrh	r3, [r1, #12]
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	4605      	mov	r5, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4616      	mov	r6, r2
 800109e:	d505      	bpl.n	80010ac <__swrite+0x1e>
 80010a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a4:	2302      	movs	r3, #2
 80010a6:	2200      	movs	r2, #0
 80010a8:	f000 f8d0 	bl	800124c <_lseek_r>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010b6:	81a3      	strh	r3, [r4, #12]
 80010b8:	4632      	mov	r2, r6
 80010ba:	463b      	mov	r3, r7
 80010bc:	4628      	mov	r0, r5
 80010be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010c2:	f000 b8e7 	b.w	8001294 <_write_r>

080010c6 <__sseek>:
 80010c6:	b510      	push	{r4, lr}
 80010c8:	460c      	mov	r4, r1
 80010ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ce:	f000 f8bd 	bl	800124c <_lseek_r>
 80010d2:	1c43      	adds	r3, r0, #1
 80010d4:	89a3      	ldrh	r3, [r4, #12]
 80010d6:	bf15      	itete	ne
 80010d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010e2:	81a3      	strheq	r3, [r4, #12]
 80010e4:	bf18      	it	ne
 80010e6:	81a3      	strhne	r3, [r4, #12]
 80010e8:	bd10      	pop	{r4, pc}

080010ea <__sclose>:
 80010ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ee:	f000 b89d 	b.w	800122c <_close_r>

080010f2 <__swbuf_r>:
 80010f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f4:	460e      	mov	r6, r1
 80010f6:	4614      	mov	r4, r2
 80010f8:	4605      	mov	r5, r0
 80010fa:	b118      	cbz	r0, 8001104 <__swbuf_r+0x12>
 80010fc:	6a03      	ldr	r3, [r0, #32]
 80010fe:	b90b      	cbnz	r3, 8001104 <__swbuf_r+0x12>
 8001100:	f7ff ff64 	bl	8000fcc <__sinit>
 8001104:	69a3      	ldr	r3, [r4, #24]
 8001106:	60a3      	str	r3, [r4, #8]
 8001108:	89a3      	ldrh	r3, [r4, #12]
 800110a:	071a      	lsls	r2, r3, #28
 800110c:	d501      	bpl.n	8001112 <__swbuf_r+0x20>
 800110e:	6923      	ldr	r3, [r4, #16]
 8001110:	b943      	cbnz	r3, 8001124 <__swbuf_r+0x32>
 8001112:	4621      	mov	r1, r4
 8001114:	4628      	mov	r0, r5
 8001116:	f000 f82b 	bl	8001170 <__swsetup_r>
 800111a:	b118      	cbz	r0, 8001124 <__swbuf_r+0x32>
 800111c:	f04f 37ff 	mov.w	r7, #4294967295
 8001120:	4638      	mov	r0, r7
 8001122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	6922      	ldr	r2, [r4, #16]
 8001128:	1a98      	subs	r0, r3, r2
 800112a:	6963      	ldr	r3, [r4, #20]
 800112c:	b2f6      	uxtb	r6, r6
 800112e:	4283      	cmp	r3, r0
 8001130:	4637      	mov	r7, r6
 8001132:	dc05      	bgt.n	8001140 <__swbuf_r+0x4e>
 8001134:	4621      	mov	r1, r4
 8001136:	4628      	mov	r0, r5
 8001138:	f000 fa68 	bl	800160c <_fflush_r>
 800113c:	2800      	cmp	r0, #0
 800113e:	d1ed      	bne.n	800111c <__swbuf_r+0x2a>
 8001140:	68a3      	ldr	r3, [r4, #8]
 8001142:	3b01      	subs	r3, #1
 8001144:	60a3      	str	r3, [r4, #8]
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	6022      	str	r2, [r4, #0]
 800114c:	701e      	strb	r6, [r3, #0]
 800114e:	6962      	ldr	r2, [r4, #20]
 8001150:	1c43      	adds	r3, r0, #1
 8001152:	429a      	cmp	r2, r3
 8001154:	d004      	beq.n	8001160 <__swbuf_r+0x6e>
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	07db      	lsls	r3, r3, #31
 800115a:	d5e1      	bpl.n	8001120 <__swbuf_r+0x2e>
 800115c:	2e0a      	cmp	r6, #10
 800115e:	d1df      	bne.n	8001120 <__swbuf_r+0x2e>
 8001160:	4621      	mov	r1, r4
 8001162:	4628      	mov	r0, r5
 8001164:	f000 fa52 	bl	800160c <_fflush_r>
 8001168:	2800      	cmp	r0, #0
 800116a:	d0d9      	beq.n	8001120 <__swbuf_r+0x2e>
 800116c:	e7d6      	b.n	800111c <__swbuf_r+0x2a>
	...

08001170 <__swsetup_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <__swsetup_r+0xa8>)
 8001174:	4605      	mov	r5, r0
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	460c      	mov	r4, r1
 800117a:	b118      	cbz	r0, 8001184 <__swsetup_r+0x14>
 800117c:	6a03      	ldr	r3, [r0, #32]
 800117e:	b90b      	cbnz	r3, 8001184 <__swsetup_r+0x14>
 8001180:	f7ff ff24 	bl	8000fcc <__sinit>
 8001184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001188:	0719      	lsls	r1, r3, #28
 800118a:	d422      	bmi.n	80011d2 <__swsetup_r+0x62>
 800118c:	06da      	lsls	r2, r3, #27
 800118e:	d407      	bmi.n	80011a0 <__swsetup_r+0x30>
 8001190:	2209      	movs	r2, #9
 8001192:	602a      	str	r2, [r5, #0]
 8001194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001198:	81a3      	strh	r3, [r4, #12]
 800119a:	f04f 30ff 	mov.w	r0, #4294967295
 800119e:	e033      	b.n	8001208 <__swsetup_r+0x98>
 80011a0:	0758      	lsls	r0, r3, #29
 80011a2:	d512      	bpl.n	80011ca <__swsetup_r+0x5a>
 80011a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011a6:	b141      	cbz	r1, 80011ba <__swsetup_r+0x4a>
 80011a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011ac:	4299      	cmp	r1, r3
 80011ae:	d002      	beq.n	80011b6 <__swsetup_r+0x46>
 80011b0:	4628      	mov	r0, r5
 80011b2:	f000 f8af 	bl	8001314 <_free_r>
 80011b6:	2300      	movs	r3, #0
 80011b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011c0:	81a3      	strh	r3, [r4, #12]
 80011c2:	2300      	movs	r3, #0
 80011c4:	6063      	str	r3, [r4, #4]
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	81a3      	strh	r3, [r4, #12]
 80011d2:	6923      	ldr	r3, [r4, #16]
 80011d4:	b94b      	cbnz	r3, 80011ea <__swsetup_r+0x7a>
 80011d6:	89a3      	ldrh	r3, [r4, #12]
 80011d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80011dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011e0:	d003      	beq.n	80011ea <__swsetup_r+0x7a>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f000 fa5f 	bl	80016a8 <__smakebuf_r>
 80011ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ee:	f013 0201 	ands.w	r2, r3, #1
 80011f2:	d00a      	beq.n	800120a <__swsetup_r+0x9a>
 80011f4:	2200      	movs	r2, #0
 80011f6:	60a2      	str	r2, [r4, #8]
 80011f8:	6962      	ldr	r2, [r4, #20]
 80011fa:	4252      	negs	r2, r2
 80011fc:	61a2      	str	r2, [r4, #24]
 80011fe:	6922      	ldr	r2, [r4, #16]
 8001200:	b942      	cbnz	r2, 8001214 <__swsetup_r+0xa4>
 8001202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001206:	d1c5      	bne.n	8001194 <__swsetup_r+0x24>
 8001208:	bd38      	pop	{r3, r4, r5, pc}
 800120a:	0799      	lsls	r1, r3, #30
 800120c:	bf58      	it	pl
 800120e:	6962      	ldrpl	r2, [r4, #20]
 8001210:	60a2      	str	r2, [r4, #8]
 8001212:	e7f4      	b.n	80011fe <__swsetup_r+0x8e>
 8001214:	2000      	movs	r0, #0
 8001216:	e7f7      	b.n	8001208 <__swsetup_r+0x98>
 8001218:	20000010 	.word	0x20000010

0800121c <memset>:
 800121c:	4402      	add	r2, r0
 800121e:	4603      	mov	r3, r0
 8001220:	4293      	cmp	r3, r2
 8001222:	d100      	bne.n	8001226 <memset+0xa>
 8001224:	4770      	bx	lr
 8001226:	f803 1b01 	strb.w	r1, [r3], #1
 800122a:	e7f9      	b.n	8001220 <memset+0x4>

0800122c <_close_r>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4d06      	ldr	r5, [pc, #24]	@ (8001248 <_close_r+0x1c>)
 8001230:	2300      	movs	r3, #0
 8001232:	4604      	mov	r4, r0
 8001234:	4608      	mov	r0, r1
 8001236:	602b      	str	r3, [r5, #0]
 8001238:	f7ff fa73 	bl	8000722 <_close>
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	d102      	bne.n	8001246 <_close_r+0x1a>
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	b103      	cbz	r3, 8001246 <_close_r+0x1a>
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	200001bc 	.word	0x200001bc

0800124c <_lseek_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d07      	ldr	r5, [pc, #28]	@ (800126c <_lseek_r+0x20>)
 8001250:	4604      	mov	r4, r0
 8001252:	4608      	mov	r0, r1
 8001254:	4611      	mov	r1, r2
 8001256:	2200      	movs	r2, #0
 8001258:	602a      	str	r2, [r5, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	f7ff fa88 	bl	8000770 <_lseek>
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	d102      	bne.n	800126a <_lseek_r+0x1e>
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	b103      	cbz	r3, 800126a <_lseek_r+0x1e>
 8001268:	6023      	str	r3, [r4, #0]
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	200001bc 	.word	0x200001bc

08001270 <_read_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4d07      	ldr	r5, [pc, #28]	@ (8001290 <_read_r+0x20>)
 8001274:	4604      	mov	r4, r0
 8001276:	4608      	mov	r0, r1
 8001278:	4611      	mov	r1, r2
 800127a:	2200      	movs	r2, #0
 800127c:	602a      	str	r2, [r5, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	f7ff fa32 	bl	80006e8 <_read>
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d102      	bne.n	800128e <_read_r+0x1e>
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	b103      	cbz	r3, 800128e <_read_r+0x1e>
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	200001bc 	.word	0x200001bc

08001294 <_write_r>:
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	4d07      	ldr	r5, [pc, #28]	@ (80012b4 <_write_r+0x20>)
 8001298:	4604      	mov	r4, r0
 800129a:	4608      	mov	r0, r1
 800129c:	4611      	mov	r1, r2
 800129e:	2200      	movs	r2, #0
 80012a0:	602a      	str	r2, [r5, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	f7ff f813 	bl	80002ce <_write>
 80012a8:	1c43      	adds	r3, r0, #1
 80012aa:	d102      	bne.n	80012b2 <_write_r+0x1e>
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	b103      	cbz	r3, 80012b2 <_write_r+0x1e>
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	200001bc 	.word	0x200001bc

080012b8 <__errno>:
 80012b8:	4b01      	ldr	r3, [pc, #4]	@ (80012c0 <__errno+0x8>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000010 	.word	0x20000010

080012c4 <__libc_init_array>:
 80012c4:	b570      	push	{r4, r5, r6, lr}
 80012c6:	4d0d      	ldr	r5, [pc, #52]	@ (80012fc <__libc_init_array+0x38>)
 80012c8:	4c0d      	ldr	r4, [pc, #52]	@ (8001300 <__libc_init_array+0x3c>)
 80012ca:	1b64      	subs	r4, r4, r5
 80012cc:	10a4      	asrs	r4, r4, #2
 80012ce:	2600      	movs	r6, #0
 80012d0:	42a6      	cmp	r6, r4
 80012d2:	d109      	bne.n	80012e8 <__libc_init_array+0x24>
 80012d4:	4d0b      	ldr	r5, [pc, #44]	@ (8001304 <__libc_init_array+0x40>)
 80012d6:	4c0c      	ldr	r4, [pc, #48]	@ (8001308 <__libc_init_array+0x44>)
 80012d8:	f000 fa88 	bl	80017ec <_init>
 80012dc:	1b64      	subs	r4, r4, r5
 80012de:	10a4      	asrs	r4, r4, #2
 80012e0:	2600      	movs	r6, #0
 80012e2:	42a6      	cmp	r6, r4
 80012e4:	d105      	bne.n	80012f2 <__libc_init_array+0x2e>
 80012e6:	bd70      	pop	{r4, r5, r6, pc}
 80012e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ec:	4798      	blx	r3
 80012ee:	3601      	adds	r6, #1
 80012f0:	e7ee      	b.n	80012d0 <__libc_init_array+0xc>
 80012f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f6:	4798      	blx	r3
 80012f8:	3601      	adds	r6, #1
 80012fa:	e7f2      	b.n	80012e2 <__libc_init_array+0x1e>
 80012fc:	08001890 	.word	0x08001890
 8001300:	08001890 	.word	0x08001890
 8001304:	08001890 	.word	0x08001890
 8001308:	08001894 	.word	0x08001894

0800130c <__retarget_lock_init_recursive>:
 800130c:	4770      	bx	lr

0800130e <__retarget_lock_acquire_recursive>:
 800130e:	4770      	bx	lr

08001310 <__retarget_lock_release_recursive>:
 8001310:	4770      	bx	lr
	...

08001314 <_free_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4605      	mov	r5, r0
 8001318:	2900      	cmp	r1, #0
 800131a:	d041      	beq.n	80013a0 <_free_r+0x8c>
 800131c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001320:	1f0c      	subs	r4, r1, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	bfb8      	it	lt
 8001326:	18e4      	addlt	r4, r4, r3
 8001328:	f000 f8e0 	bl	80014ec <__malloc_lock>
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <_free_r+0x90>)
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	b933      	cbnz	r3, 8001340 <_free_r+0x2c>
 8001332:	6063      	str	r3, [r4, #4]
 8001334:	6014      	str	r4, [r2, #0]
 8001336:	4628      	mov	r0, r5
 8001338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800133c:	f000 b8dc 	b.w	80014f8 <__malloc_unlock>
 8001340:	42a3      	cmp	r3, r4
 8001342:	d908      	bls.n	8001356 <_free_r+0x42>
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	1821      	adds	r1, r4, r0
 8001348:	428b      	cmp	r3, r1
 800134a:	bf01      	itttt	eq
 800134c:	6819      	ldreq	r1, [r3, #0]
 800134e:	685b      	ldreq	r3, [r3, #4]
 8001350:	1809      	addeq	r1, r1, r0
 8001352:	6021      	streq	r1, [r4, #0]
 8001354:	e7ed      	b.n	8001332 <_free_r+0x1e>
 8001356:	461a      	mov	r2, r3
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	b10b      	cbz	r3, 8001360 <_free_r+0x4c>
 800135c:	42a3      	cmp	r3, r4
 800135e:	d9fa      	bls.n	8001356 <_free_r+0x42>
 8001360:	6811      	ldr	r1, [r2, #0]
 8001362:	1850      	adds	r0, r2, r1
 8001364:	42a0      	cmp	r0, r4
 8001366:	d10b      	bne.n	8001380 <_free_r+0x6c>
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	4401      	add	r1, r0
 800136c:	1850      	adds	r0, r2, r1
 800136e:	4283      	cmp	r3, r0
 8001370:	6011      	str	r1, [r2, #0]
 8001372:	d1e0      	bne.n	8001336 <_free_r+0x22>
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	6053      	str	r3, [r2, #4]
 800137a:	4408      	add	r0, r1
 800137c:	6010      	str	r0, [r2, #0]
 800137e:	e7da      	b.n	8001336 <_free_r+0x22>
 8001380:	d902      	bls.n	8001388 <_free_r+0x74>
 8001382:	230c      	movs	r3, #12
 8001384:	602b      	str	r3, [r5, #0]
 8001386:	e7d6      	b.n	8001336 <_free_r+0x22>
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	1821      	adds	r1, r4, r0
 800138c:	428b      	cmp	r3, r1
 800138e:	bf04      	itt	eq
 8001390:	6819      	ldreq	r1, [r3, #0]
 8001392:	685b      	ldreq	r3, [r3, #4]
 8001394:	6063      	str	r3, [r4, #4]
 8001396:	bf04      	itt	eq
 8001398:	1809      	addeq	r1, r1, r0
 800139a:	6021      	streq	r1, [r4, #0]
 800139c:	6054      	str	r4, [r2, #4]
 800139e:	e7ca      	b.n	8001336 <_free_r+0x22>
 80013a0:	bd38      	pop	{r3, r4, r5, pc}
 80013a2:	bf00      	nop
 80013a4:	200001c8 	.word	0x200001c8

080013a8 <sbrk_aligned>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4e0f      	ldr	r6, [pc, #60]	@ (80013e8 <sbrk_aligned+0x40>)
 80013ac:	460c      	mov	r4, r1
 80013ae:	6831      	ldr	r1, [r6, #0]
 80013b0:	4605      	mov	r5, r0
 80013b2:	b911      	cbnz	r1, 80013ba <sbrk_aligned+0x12>
 80013b4:	f000 fa0a 	bl	80017cc <_sbrk_r>
 80013b8:	6030      	str	r0, [r6, #0]
 80013ba:	4621      	mov	r1, r4
 80013bc:	4628      	mov	r0, r5
 80013be:	f000 fa05 	bl	80017cc <_sbrk_r>
 80013c2:	1c43      	adds	r3, r0, #1
 80013c4:	d103      	bne.n	80013ce <sbrk_aligned+0x26>
 80013c6:	f04f 34ff 	mov.w	r4, #4294967295
 80013ca:	4620      	mov	r0, r4
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
 80013ce:	1cc4      	adds	r4, r0, #3
 80013d0:	f024 0403 	bic.w	r4, r4, #3
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	d0f8      	beq.n	80013ca <sbrk_aligned+0x22>
 80013d8:	1a21      	subs	r1, r4, r0
 80013da:	4628      	mov	r0, r5
 80013dc:	f000 f9f6 	bl	80017cc <_sbrk_r>
 80013e0:	3001      	adds	r0, #1
 80013e2:	d1f2      	bne.n	80013ca <sbrk_aligned+0x22>
 80013e4:	e7ef      	b.n	80013c6 <sbrk_aligned+0x1e>
 80013e6:	bf00      	nop
 80013e8:	200001c4 	.word	0x200001c4

080013ec <_malloc_r>:
 80013ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f0:	1ccd      	adds	r5, r1, #3
 80013f2:	f025 0503 	bic.w	r5, r5, #3
 80013f6:	3508      	adds	r5, #8
 80013f8:	2d0c      	cmp	r5, #12
 80013fa:	bf38      	it	cc
 80013fc:	250c      	movcc	r5, #12
 80013fe:	2d00      	cmp	r5, #0
 8001400:	4606      	mov	r6, r0
 8001402:	db01      	blt.n	8001408 <_malloc_r+0x1c>
 8001404:	42a9      	cmp	r1, r5
 8001406:	d904      	bls.n	8001412 <_malloc_r+0x26>
 8001408:	230c      	movs	r3, #12
 800140a:	6033      	str	r3, [r6, #0]
 800140c:	2000      	movs	r0, #0
 800140e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80014e8 <_malloc_r+0xfc>
 8001416:	f000 f869 	bl	80014ec <__malloc_lock>
 800141a:	f8d8 3000 	ldr.w	r3, [r8]
 800141e:	461c      	mov	r4, r3
 8001420:	bb44      	cbnz	r4, 8001474 <_malloc_r+0x88>
 8001422:	4629      	mov	r1, r5
 8001424:	4630      	mov	r0, r6
 8001426:	f7ff ffbf 	bl	80013a8 <sbrk_aligned>
 800142a:	1c43      	adds	r3, r0, #1
 800142c:	4604      	mov	r4, r0
 800142e:	d158      	bne.n	80014e2 <_malloc_r+0xf6>
 8001430:	f8d8 4000 	ldr.w	r4, [r8]
 8001434:	4627      	mov	r7, r4
 8001436:	2f00      	cmp	r7, #0
 8001438:	d143      	bne.n	80014c2 <_malloc_r+0xd6>
 800143a:	2c00      	cmp	r4, #0
 800143c:	d04b      	beq.n	80014d6 <_malloc_r+0xea>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	4639      	mov	r1, r7
 8001442:	4630      	mov	r0, r6
 8001444:	eb04 0903 	add.w	r9, r4, r3
 8001448:	f000 f9c0 	bl	80017cc <_sbrk_r>
 800144c:	4581      	cmp	r9, r0
 800144e:	d142      	bne.n	80014d6 <_malloc_r+0xea>
 8001450:	6821      	ldr	r1, [r4, #0]
 8001452:	1a6d      	subs	r5, r5, r1
 8001454:	4629      	mov	r1, r5
 8001456:	4630      	mov	r0, r6
 8001458:	f7ff ffa6 	bl	80013a8 <sbrk_aligned>
 800145c:	3001      	adds	r0, #1
 800145e:	d03a      	beq.n	80014d6 <_malloc_r+0xea>
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	442b      	add	r3, r5
 8001464:	6023      	str	r3, [r4, #0]
 8001466:	f8d8 3000 	ldr.w	r3, [r8]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	bb62      	cbnz	r2, 80014c8 <_malloc_r+0xdc>
 800146e:	f8c8 7000 	str.w	r7, [r8]
 8001472:	e00f      	b.n	8001494 <_malloc_r+0xa8>
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	1b52      	subs	r2, r2, r5
 8001478:	d420      	bmi.n	80014bc <_malloc_r+0xd0>
 800147a:	2a0b      	cmp	r2, #11
 800147c:	d917      	bls.n	80014ae <_malloc_r+0xc2>
 800147e:	1961      	adds	r1, r4, r5
 8001480:	42a3      	cmp	r3, r4
 8001482:	6025      	str	r5, [r4, #0]
 8001484:	bf18      	it	ne
 8001486:	6059      	strne	r1, [r3, #4]
 8001488:	6863      	ldr	r3, [r4, #4]
 800148a:	bf08      	it	eq
 800148c:	f8c8 1000 	streq.w	r1, [r8]
 8001490:	5162      	str	r2, [r4, r5]
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	4630      	mov	r0, r6
 8001496:	f000 f82f 	bl	80014f8 <__malloc_unlock>
 800149a:	f104 000b 	add.w	r0, r4, #11
 800149e:	1d23      	adds	r3, r4, #4
 80014a0:	f020 0007 	bic.w	r0, r0, #7
 80014a4:	1ac2      	subs	r2, r0, r3
 80014a6:	bf1c      	itt	ne
 80014a8:	1a1b      	subne	r3, r3, r0
 80014aa:	50a3      	strne	r3, [r4, r2]
 80014ac:	e7af      	b.n	800140e <_malloc_r+0x22>
 80014ae:	6862      	ldr	r2, [r4, #4]
 80014b0:	42a3      	cmp	r3, r4
 80014b2:	bf0c      	ite	eq
 80014b4:	f8c8 2000 	streq.w	r2, [r8]
 80014b8:	605a      	strne	r2, [r3, #4]
 80014ba:	e7eb      	b.n	8001494 <_malloc_r+0xa8>
 80014bc:	4623      	mov	r3, r4
 80014be:	6864      	ldr	r4, [r4, #4]
 80014c0:	e7ae      	b.n	8001420 <_malloc_r+0x34>
 80014c2:	463c      	mov	r4, r7
 80014c4:	687f      	ldr	r7, [r7, #4]
 80014c6:	e7b6      	b.n	8001436 <_malloc_r+0x4a>
 80014c8:	461a      	mov	r2, r3
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	42a3      	cmp	r3, r4
 80014ce:	d1fb      	bne.n	80014c8 <_malloc_r+0xdc>
 80014d0:	2300      	movs	r3, #0
 80014d2:	6053      	str	r3, [r2, #4]
 80014d4:	e7de      	b.n	8001494 <_malloc_r+0xa8>
 80014d6:	230c      	movs	r3, #12
 80014d8:	6033      	str	r3, [r6, #0]
 80014da:	4630      	mov	r0, r6
 80014dc:	f000 f80c 	bl	80014f8 <__malloc_unlock>
 80014e0:	e794      	b.n	800140c <_malloc_r+0x20>
 80014e2:	6005      	str	r5, [r0, #0]
 80014e4:	e7d6      	b.n	8001494 <_malloc_r+0xa8>
 80014e6:	bf00      	nop
 80014e8:	200001c8 	.word	0x200001c8

080014ec <__malloc_lock>:
 80014ec:	4801      	ldr	r0, [pc, #4]	@ (80014f4 <__malloc_lock+0x8>)
 80014ee:	f7ff bf0e 	b.w	800130e <__retarget_lock_acquire_recursive>
 80014f2:	bf00      	nop
 80014f4:	200001c0 	.word	0x200001c0

080014f8 <__malloc_unlock>:
 80014f8:	4801      	ldr	r0, [pc, #4]	@ (8001500 <__malloc_unlock+0x8>)
 80014fa:	f7ff bf09 	b.w	8001310 <__retarget_lock_release_recursive>
 80014fe:	bf00      	nop
 8001500:	200001c0 	.word	0x200001c0

08001504 <__sflush_r>:
 8001504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150c:	0716      	lsls	r6, r2, #28
 800150e:	4605      	mov	r5, r0
 8001510:	460c      	mov	r4, r1
 8001512:	d454      	bmi.n	80015be <__sflush_r+0xba>
 8001514:	684b      	ldr	r3, [r1, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	dc02      	bgt.n	8001520 <__sflush_r+0x1c>
 800151a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	dd48      	ble.n	80015b2 <__sflush_r+0xae>
 8001520:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001522:	2e00      	cmp	r6, #0
 8001524:	d045      	beq.n	80015b2 <__sflush_r+0xae>
 8001526:	2300      	movs	r3, #0
 8001528:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800152c:	682f      	ldr	r7, [r5, #0]
 800152e:	6a21      	ldr	r1, [r4, #32]
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	d030      	beq.n	8001596 <__sflush_r+0x92>
 8001534:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	0759      	lsls	r1, r3, #29
 800153a:	d505      	bpl.n	8001548 <__sflush_r+0x44>
 800153c:	6863      	ldr	r3, [r4, #4]
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001542:	b10b      	cbz	r3, 8001548 <__sflush_r+0x44>
 8001544:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001546:	1ad2      	subs	r2, r2, r3
 8001548:	2300      	movs	r3, #0
 800154a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800154c:	6a21      	ldr	r1, [r4, #32]
 800154e:	4628      	mov	r0, r5
 8001550:	47b0      	blx	r6
 8001552:	1c43      	adds	r3, r0, #1
 8001554:	89a3      	ldrh	r3, [r4, #12]
 8001556:	d106      	bne.n	8001566 <__sflush_r+0x62>
 8001558:	6829      	ldr	r1, [r5, #0]
 800155a:	291d      	cmp	r1, #29
 800155c:	d82b      	bhi.n	80015b6 <__sflush_r+0xb2>
 800155e:	4a2a      	ldr	r2, [pc, #168]	@ (8001608 <__sflush_r+0x104>)
 8001560:	410a      	asrs	r2, r1
 8001562:	07d6      	lsls	r6, r2, #31
 8001564:	d427      	bmi.n	80015b6 <__sflush_r+0xb2>
 8001566:	2200      	movs	r2, #0
 8001568:	6062      	str	r2, [r4, #4]
 800156a:	04d9      	lsls	r1, r3, #19
 800156c:	6922      	ldr	r2, [r4, #16]
 800156e:	6022      	str	r2, [r4, #0]
 8001570:	d504      	bpl.n	800157c <__sflush_r+0x78>
 8001572:	1c42      	adds	r2, r0, #1
 8001574:	d101      	bne.n	800157a <__sflush_r+0x76>
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	b903      	cbnz	r3, 800157c <__sflush_r+0x78>
 800157a:	6560      	str	r0, [r4, #84]	@ 0x54
 800157c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800157e:	602f      	str	r7, [r5, #0]
 8001580:	b1b9      	cbz	r1, 80015b2 <__sflush_r+0xae>
 8001582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001586:	4299      	cmp	r1, r3
 8001588:	d002      	beq.n	8001590 <__sflush_r+0x8c>
 800158a:	4628      	mov	r0, r5
 800158c:	f7ff fec2 	bl	8001314 <_free_r>
 8001590:	2300      	movs	r3, #0
 8001592:	6363      	str	r3, [r4, #52]	@ 0x34
 8001594:	e00d      	b.n	80015b2 <__sflush_r+0xae>
 8001596:	2301      	movs	r3, #1
 8001598:	4628      	mov	r0, r5
 800159a:	47b0      	blx	r6
 800159c:	4602      	mov	r2, r0
 800159e:	1c50      	adds	r0, r2, #1
 80015a0:	d1c9      	bne.n	8001536 <__sflush_r+0x32>
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0c6      	beq.n	8001536 <__sflush_r+0x32>
 80015a8:	2b1d      	cmp	r3, #29
 80015aa:	d001      	beq.n	80015b0 <__sflush_r+0xac>
 80015ac:	2b16      	cmp	r3, #22
 80015ae:	d11e      	bne.n	80015ee <__sflush_r+0xea>
 80015b0:	602f      	str	r7, [r5, #0]
 80015b2:	2000      	movs	r0, #0
 80015b4:	e022      	b.n	80015fc <__sflush_r+0xf8>
 80015b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	e01b      	b.n	80015f6 <__sflush_r+0xf2>
 80015be:	690f      	ldr	r7, [r1, #16]
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	d0f6      	beq.n	80015b2 <__sflush_r+0xae>
 80015c4:	0793      	lsls	r3, r2, #30
 80015c6:	680e      	ldr	r6, [r1, #0]
 80015c8:	bf08      	it	eq
 80015ca:	694b      	ldreq	r3, [r1, #20]
 80015cc:	600f      	str	r7, [r1, #0]
 80015ce:	bf18      	it	ne
 80015d0:	2300      	movne	r3, #0
 80015d2:	eba6 0807 	sub.w	r8, r6, r7
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	f1b8 0f00 	cmp.w	r8, #0
 80015dc:	dde9      	ble.n	80015b2 <__sflush_r+0xae>
 80015de:	6a21      	ldr	r1, [r4, #32]
 80015e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80015e2:	4643      	mov	r3, r8
 80015e4:	463a      	mov	r2, r7
 80015e6:	4628      	mov	r0, r5
 80015e8:	47b0      	blx	r6
 80015ea:	2800      	cmp	r0, #0
 80015ec:	dc08      	bgt.n	8001600 <__sflush_r+0xfc>
 80015ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f6:	81a3      	strh	r3, [r4, #12]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001600:	4407      	add	r7, r0
 8001602:	eba8 0800 	sub.w	r8, r8, r0
 8001606:	e7e7      	b.n	80015d8 <__sflush_r+0xd4>
 8001608:	dfbffffe 	.word	0xdfbffffe

0800160c <_fflush_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	690b      	ldr	r3, [r1, #16]
 8001610:	4605      	mov	r5, r0
 8001612:	460c      	mov	r4, r1
 8001614:	b913      	cbnz	r3, 800161c <_fflush_r+0x10>
 8001616:	2500      	movs	r5, #0
 8001618:	4628      	mov	r0, r5
 800161a:	bd38      	pop	{r3, r4, r5, pc}
 800161c:	b118      	cbz	r0, 8001626 <_fflush_r+0x1a>
 800161e:	6a03      	ldr	r3, [r0, #32]
 8001620:	b90b      	cbnz	r3, 8001626 <_fflush_r+0x1a>
 8001622:	f7ff fcd3 	bl	8000fcc <__sinit>
 8001626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f3      	beq.n	8001616 <_fflush_r+0xa>
 800162e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001630:	07d0      	lsls	r0, r2, #31
 8001632:	d404      	bmi.n	800163e <_fflush_r+0x32>
 8001634:	0599      	lsls	r1, r3, #22
 8001636:	d402      	bmi.n	800163e <_fflush_r+0x32>
 8001638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800163a:	f7ff fe68 	bl	800130e <__retarget_lock_acquire_recursive>
 800163e:	4628      	mov	r0, r5
 8001640:	4621      	mov	r1, r4
 8001642:	f7ff ff5f 	bl	8001504 <__sflush_r>
 8001646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001648:	07da      	lsls	r2, r3, #31
 800164a:	4605      	mov	r5, r0
 800164c:	d4e4      	bmi.n	8001618 <_fflush_r+0xc>
 800164e:	89a3      	ldrh	r3, [r4, #12]
 8001650:	059b      	lsls	r3, r3, #22
 8001652:	d4e1      	bmi.n	8001618 <_fflush_r+0xc>
 8001654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001656:	f7ff fe5b 	bl	8001310 <__retarget_lock_release_recursive>
 800165a:	e7dd      	b.n	8001618 <_fflush_r+0xc>

0800165c <__swhatbuf_r>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	460c      	mov	r4, r1
 8001660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001664:	2900      	cmp	r1, #0
 8001666:	b096      	sub	sp, #88	@ 0x58
 8001668:	4615      	mov	r5, r2
 800166a:	461e      	mov	r6, r3
 800166c:	da0d      	bge.n	800168a <__swhatbuf_r+0x2e>
 800166e:	89a3      	ldrh	r3, [r4, #12]
 8001670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	bf14      	ite	ne
 800167a:	2340      	movne	r3, #64	@ 0x40
 800167c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001680:	2000      	movs	r0, #0
 8001682:	6031      	str	r1, [r6, #0]
 8001684:	602b      	str	r3, [r5, #0]
 8001686:	b016      	add	sp, #88	@ 0x58
 8001688:	bd70      	pop	{r4, r5, r6, pc}
 800168a:	466a      	mov	r2, sp
 800168c:	f000 f87c 	bl	8001788 <_fstat_r>
 8001690:	2800      	cmp	r0, #0
 8001692:	dbec      	blt.n	800166e <__swhatbuf_r+0x12>
 8001694:	9901      	ldr	r1, [sp, #4]
 8001696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800169a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800169e:	4259      	negs	r1, r3
 80016a0:	4159      	adcs	r1, r3
 80016a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a6:	e7eb      	b.n	8001680 <__swhatbuf_r+0x24>

080016a8 <__smakebuf_r>:
 80016a8:	898b      	ldrh	r3, [r1, #12]
 80016aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016ac:	079d      	lsls	r5, r3, #30
 80016ae:	4606      	mov	r6, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	d507      	bpl.n	80016c4 <__smakebuf_r+0x1c>
 80016b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	6123      	str	r3, [r4, #16]
 80016bc:	2301      	movs	r3, #1
 80016be:	6163      	str	r3, [r4, #20]
 80016c0:	b003      	add	sp, #12
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	ab01      	add	r3, sp, #4
 80016c6:	466a      	mov	r2, sp
 80016c8:	f7ff ffc8 	bl	800165c <__swhatbuf_r>
 80016cc:	9f00      	ldr	r7, [sp, #0]
 80016ce:	4605      	mov	r5, r0
 80016d0:	4639      	mov	r1, r7
 80016d2:	4630      	mov	r0, r6
 80016d4:	f7ff fe8a 	bl	80013ec <_malloc_r>
 80016d8:	b948      	cbnz	r0, 80016ee <__smakebuf_r+0x46>
 80016da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016de:	059a      	lsls	r2, r3, #22
 80016e0:	d4ee      	bmi.n	80016c0 <__smakebuf_r+0x18>
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	e7e2      	b.n	80016b4 <__smakebuf_r+0xc>
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	6020      	str	r0, [r4, #0]
 80016f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f6:	81a3      	strh	r3, [r4, #12]
 80016f8:	9b01      	ldr	r3, [sp, #4]
 80016fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016fe:	b15b      	cbz	r3, 8001718 <__smakebuf_r+0x70>
 8001700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001704:	4630      	mov	r0, r6
 8001706:	f000 f851 	bl	80017ac <_isatty_r>
 800170a:	b128      	cbz	r0, 8001718 <__smakebuf_r+0x70>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	81a3      	strh	r3, [r4, #12]
 8001718:	89a3      	ldrh	r3, [r4, #12]
 800171a:	431d      	orrs	r5, r3
 800171c:	81a5      	strh	r5, [r4, #12]
 800171e:	e7cf      	b.n	80016c0 <__smakebuf_r+0x18>

08001720 <_putc_r>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460d      	mov	r5, r1
 8001724:	4614      	mov	r4, r2
 8001726:	4606      	mov	r6, r0
 8001728:	b118      	cbz	r0, 8001732 <_putc_r+0x12>
 800172a:	6a03      	ldr	r3, [r0, #32]
 800172c:	b90b      	cbnz	r3, 8001732 <_putc_r+0x12>
 800172e:	f7ff fc4d 	bl	8000fcc <__sinit>
 8001732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001734:	07d8      	lsls	r0, r3, #31
 8001736:	d405      	bmi.n	8001744 <_putc_r+0x24>
 8001738:	89a3      	ldrh	r3, [r4, #12]
 800173a:	0599      	lsls	r1, r3, #22
 800173c:	d402      	bmi.n	8001744 <_putc_r+0x24>
 800173e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001740:	f7ff fde5 	bl	800130e <__retarget_lock_acquire_recursive>
 8001744:	68a3      	ldr	r3, [r4, #8]
 8001746:	3b01      	subs	r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	60a3      	str	r3, [r4, #8]
 800174c:	da05      	bge.n	800175a <_putc_r+0x3a>
 800174e:	69a2      	ldr	r2, [r4, #24]
 8001750:	4293      	cmp	r3, r2
 8001752:	db12      	blt.n	800177a <_putc_r+0x5a>
 8001754:	b2eb      	uxtb	r3, r5
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d00f      	beq.n	800177a <_putc_r+0x5a>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	6022      	str	r2, [r4, #0]
 8001760:	701d      	strb	r5, [r3, #0]
 8001762:	b2ed      	uxtb	r5, r5
 8001764:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001766:	07da      	lsls	r2, r3, #31
 8001768:	d405      	bmi.n	8001776 <_putc_r+0x56>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	059b      	lsls	r3, r3, #22
 800176e:	d402      	bmi.n	8001776 <_putc_r+0x56>
 8001770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001772:	f7ff fdcd 	bl	8001310 <__retarget_lock_release_recursive>
 8001776:	4628      	mov	r0, r5
 8001778:	bd70      	pop	{r4, r5, r6, pc}
 800177a:	4629      	mov	r1, r5
 800177c:	4622      	mov	r2, r4
 800177e:	4630      	mov	r0, r6
 8001780:	f7ff fcb7 	bl	80010f2 <__swbuf_r>
 8001784:	4605      	mov	r5, r0
 8001786:	e7ed      	b.n	8001764 <_putc_r+0x44>

08001788 <_fstat_r>:
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4d07      	ldr	r5, [pc, #28]	@ (80017a8 <_fstat_r+0x20>)
 800178c:	2300      	movs	r3, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	f7fe ffd0 	bl	800073a <_fstat>
 800179a:	1c43      	adds	r3, r0, #1
 800179c:	d102      	bne.n	80017a4 <_fstat_r+0x1c>
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	b103      	cbz	r3, 80017a4 <_fstat_r+0x1c>
 80017a2:	6023      	str	r3, [r4, #0]
 80017a4:	bd38      	pop	{r3, r4, r5, pc}
 80017a6:	bf00      	nop
 80017a8:	200001bc 	.word	0x200001bc

080017ac <_isatty_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	4d06      	ldr	r5, [pc, #24]	@ (80017c8 <_isatty_r+0x1c>)
 80017b0:	2300      	movs	r3, #0
 80017b2:	4604      	mov	r4, r0
 80017b4:	4608      	mov	r0, r1
 80017b6:	602b      	str	r3, [r5, #0]
 80017b8:	f7fe ffcf 	bl	800075a <_isatty>
 80017bc:	1c43      	adds	r3, r0, #1
 80017be:	d102      	bne.n	80017c6 <_isatty_r+0x1a>
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	b103      	cbz	r3, 80017c6 <_isatty_r+0x1a>
 80017c4:	6023      	str	r3, [r4, #0]
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
 80017c8:	200001bc 	.word	0x200001bc

080017cc <_sbrk_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4d06      	ldr	r5, [pc, #24]	@ (80017e8 <_sbrk_r+0x1c>)
 80017d0:	2300      	movs	r3, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	602b      	str	r3, [r5, #0]
 80017d8:	f7fe ffd8 	bl	800078c <_sbrk>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_sbrk_r+0x1a>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_sbrk_r+0x1a>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	200001bc 	.word	0x200001bc

080017ec <_init>:
 80017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ee:	bf00      	nop
 80017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f2:	bc08      	pop	{r3}
 80017f4:	469e      	mov	lr, r3
 80017f6:	4770      	bx	lr

080017f8 <_fini>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	bf00      	nop
 80017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fe:	bc08      	pop	{r3}
 8001800:	469e      	mov	lr, r3
 8001802:	4770      	bx	lr
